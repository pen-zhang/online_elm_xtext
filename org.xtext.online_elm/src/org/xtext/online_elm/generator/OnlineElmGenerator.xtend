/*
 * generated by Xtext 2.24.0
 */
package org.xtext.online_elm.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

import org.xtext.online_elm.onlineElm.Shape
import org.xtext.online_elm.onlineElm.Circle
import org.xtext.online_elm.onlineElm.Rect
import org.xtext.online_elm.onlineElm.Text

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class OnlineElmGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))
		var output = 'module Shapes exposing (..)\r\nimport GraphicSVG exposing(..)\r\nmyShapes = [\r\n  '
		var t = ''
		var shapes = resource.allContents.toIterable.filter(Shape)
		var n = shapes.size
		var count = 0
		for (e : resource.allContents.toIterable.filter(Shape)){
			
			t = e.stencil.name
			if( t == 'circle'){
				t += ' ' + e.stencil.eContainer.eContents.filter(Circle).map[diameter].join() 
			}else if( t == 'rect'){
				var re = e.stencil.eContainer.eContents.filter(Rect)
				t += ' ' + re.map[edgeX].join() + ' ' + re.map[edgeY].join() 
			}else if( t == 'text'){
				t += ' ' + '"' + e.stencil.eContainer.eContents.filter(Text).map[content].join() + '"'
			}
			
			t += '\r\n  |> '
			t += e.draw.filledColor.name + ' ' + e.draw.filledColor.color.toString()
			
			if(e.draw.position !== null){
				t += '\r\n  |> ' + e.draw.position.name + ' (' + e.draw.position.x + ',' +e.draw.position.y + ')'
			}
			
			if(count < n-1 ){
				t += ' ,\r\n  '
				count ++
			}
			
			output += t
	}
	
	//output=output.substring(0,output.length()-4)
	output += ']'
	
	fsa.generateFile(resource.className+'.elm', output)
	}
	
	
	protected def className(Resource res){
		var name = res.URI.lastSegment
		return name.substring(0,name.indexOf('.')).toFirstUpper
	}
}
