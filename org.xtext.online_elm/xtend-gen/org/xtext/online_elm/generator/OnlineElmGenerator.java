/**
 * generated by Xtext 2.24.0
 */
package org.xtext.online_elm.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.xtext.online_elm.onlineElm.Circle;
import org.xtext.online_elm.onlineElm.Num_value;
import org.xtext.online_elm.onlineElm.Rect;
import org.xtext.online_elm.onlineElm.Shape;
import org.xtext.online_elm.onlineElm.Text;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class OnlineElmGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    String output = "module Shapes exposing (..)\r\nimport GraphicSVG exposing(..)\r\nmyShapes = [\r\n  ";
    String t = "";
    Iterable<Shape> shapes = Iterables.<Shape>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Shape.class);
    int n = IterableExtensions.size(shapes);
    int count = 0;
    Iterable<Shape> _filter = Iterables.<Shape>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Shape.class);
    for (final Shape e : _filter) {
      {
        t = e.getStencil().getName();
        boolean _equals = Objects.equal(t, "circle");
        if (_equals) {
          String _t = t;
          final Function1<Circle, Num_value> _function = (Circle it) -> {
            return it.getRadius();
          };
          String _join = IterableExtensions.join(IterableExtensions.<Circle, Num_value>map(Iterables.<Circle>filter(e.getStencil().eContainer().eContents(), Circle.class), _function));
          String _plus = (" " + _join);
          t = (_t + _plus);
        } else {
          boolean _equals_1 = Objects.equal(t, "rect");
          if (_equals_1) {
            Iterable<Rect> re = Iterables.<Rect>filter(e.getStencil().eContainer().eContents(), Rect.class);
            String _t_1 = t;
            final Function1<Rect, Num_value> _function_1 = (Rect it) -> {
              return it.getWidth();
            };
            String _join_1 = IterableExtensions.join(IterableExtensions.<Rect, Num_value>map(re, _function_1));
            String _plus_1 = (" " + _join_1);
            String _plus_2 = (_plus_1 + " ");
            final Function1<Rect, Num_value> _function_2 = (Rect it) -> {
              return it.getHeight();
            };
            String _join_2 = IterableExtensions.join(IterableExtensions.<Rect, Num_value>map(re, _function_2));
            String _plus_3 = (_plus_2 + _join_2);
            t = (_t_1 + _plus_3);
          } else {
            boolean _equals_2 = Objects.equal(t, "text");
            if (_equals_2) {
              String _t_2 = t;
              final Function1<Text, String> _function_3 = (Text it) -> {
                return it.getContent();
              };
              String _join_3 = IterableExtensions.join(IterableExtensions.<Text, String>map(Iterables.<Text>filter(e.getStencil().eContainer().eContents(), Text.class), _function_3));
              String _plus_4 = ((" " + "\"") + _join_3);
              String _plus_5 = (_plus_4 + "\"");
              t = (_t_2 + _plus_5);
            }
          }
        }
        String _t_3 = t;
        t = (_t_3 + "\r\n  |> ");
        String _t_4 = t;
        String _name = e.getDraw().getFilled().getName();
        String _plus_6 = (_name + " ");
        String _string = e.getDraw().getFilled().getFilledColor1().toString();
        String _plus_7 = (_plus_6 + _string);
        t = (_t_4 + _plus_7);
        if ((count < (n - 1))) {
          String _t_5 = t;
          t = (_t_5 + " ,\r\n  ");
          count++;
        }
        String _output = output;
        output = (_output + t);
      }
    }
    String _output = output;
    output = (_output + "]");
    String _className = this.className(resource);
    String _plus = (_className + ".elm");
    fsa.generateFile(_plus, output);
  }
  
  protected String className(final Resource res) {
    String name = res.getURI().lastSegment();
    return StringExtensions.toFirstUpper(name.substring(0, name.indexOf(".")));
  }
}
