/**
 * generated by Xtext 2.24.0
 */
package org.xtext.online_elm.onlineElm.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.xtext.online_elm.onlineElm.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.xtext.online_elm.onlineElm.OnlineElmPackage
 * @generated
 */
public class OnlineElmAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static OnlineElmPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OnlineElmAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = OnlineElmPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OnlineElmSwitch<Adapter> modelSwitch =
    new OnlineElmSwitch<Adapter>()
    {
      @Override
      public Adapter caseOnlineElm(OnlineElm object)
      {
        return createOnlineElmAdapter();
      }
      @Override
      public Adapter caseMainShape(MainShape object)
      {
        return createMainShapeAdapter();
      }
      @Override
      public Adapter caseShapeDef(ShapeDef object)
      {
        return createShapeDefAdapter();
      }
      @Override
      public Adapter caseLocal_var(Local_var object)
      {
        return createLocal_varAdapter();
      }
      @Override
      public Adapter caseShapeList(ShapeList object)
      {
        return createShapeListAdapter();
      }
      @Override
      public Adapter caseBasicShape(BasicShape object)
      {
        return createBasicShapeAdapter();
      }
      @Override
      public Adapter caseShape(Shape object)
      {
        return createShapeAdapter();
      }
      @Override
      public Adapter caseConditional_Shape(Conditional_Shape object)
      {
        return createConditional_ShapeAdapter();
      }
      @Override
      public Adapter caseConditional_Color(Conditional_Color object)
      {
        return createConditional_ColorAdapter();
      }
      @Override
      public Adapter caseConditional_Num(Conditional_Num object)
      {
        return createConditional_NumAdapter();
      }
      @Override
      public Adapter caseConditional_Str(Conditional_Str object)
      {
        return createConditional_StrAdapter();
      }
      @Override
      public Adapter caseBool_expr(Bool_expr object)
      {
        return createBool_exprAdapter();
      }
      @Override
      public Adapter caseOr_expr(Or_expr object)
      {
        return createOr_exprAdapter();
      }
      @Override
      public Adapter caseAnd_expr(And_expr object)
      {
        return createAnd_exprAdapter();
      }
      @Override
      public Adapter caseNot_expr(Not_expr object)
      {
        return createNot_exprAdapter();
      }
      @Override
      public Adapter caseCompare_expr(Compare_expr object)
      {
        return createCompare_exprAdapter();
      }
      @Override
      public Adapter caseNum_value(Num_value object)
      {
        return createNum_valueAdapter();
      }
      @Override
      public Adapter caseMath_exp(Math_exp object)
      {
        return createMath_expAdapter();
      }
      @Override
      public Adapter caseStencil(Stencil object)
      {
        return createStencilAdapter();
      }
      @Override
      public Adapter caseCircle(Circle object)
      {
        return createCircleAdapter();
      }
      @Override
      public Adapter caseRect(Rect object)
      {
        return createRectAdapter();
      }
      @Override
      public Adapter caseSquare(Square object)
      {
        return createSquareAdapter();
      }
      @Override
      public Adapter caseRoundedRect(RoundedRect object)
      {
        return createRoundedRectAdapter();
      }
      @Override
      public Adapter caseOval(Oval object)
      {
        return createOvalAdapter();
      }
      @Override
      public Adapter caseNgon(Ngon object)
      {
        return createNgonAdapter();
      }
      @Override
      public Adapter caseWedge(Wedge object)
      {
        return createWedgeAdapter();
      }
      @Override
      public Adapter casePolygon(Polygon object)
      {
        return createPolygonAdapter();
      }
      @Override
      public Adapter casePoint(Point object)
      {
        return createPointAdapter();
      }
      @Override
      public Adapter caseText(Text object)
      {
        return createTextAdapter();
      }
      @Override
      public Adapter caseDraw(Draw object)
      {
        return createDrawAdapter();
      }
      @Override
      public Adapter caseFilled(Filled object)
      {
        return createFilledAdapter();
      }
      @Override
      public Adapter caseOutlined(Outlined object)
      {
        return createOutlinedAdapter();
      }
      @Override
      public Adapter caseTranform(Tranform object)
      {
        return createTranformAdapter();
      }
      @Override
      public Adapter caseMove(Move object)
      {
        return createMoveAdapter();
      }
      @Override
      public Adapter caseRotate(Rotate object)
      {
        return createRotateAdapter();
      }
      @Override
      public Adapter caseScale(Scale object)
      {
        return createScaleAdapter();
      }
      @Override
      public Adapter caseScaleX(ScaleX object)
      {
        return createScaleXAdapter();
      }
      @Override
      public Adapter caseScaleY(ScaleY object)
      {
        return createScaleYAdapter();
      }
      @Override
      public Adapter caseOperation(Operation object)
      {
        return createOperationAdapter();
      }
      @Override
      public Adapter caseFloatLiteral(FloatLiteral object)
      {
        return createFloatLiteralAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.xtext.online_elm.onlineElm.OnlineElm <em>Online Elm</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.online_elm.onlineElm.OnlineElm
   * @generated
   */
  public Adapter createOnlineElmAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.online_elm.onlineElm.MainShape <em>Main Shape</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.online_elm.onlineElm.MainShape
   * @generated
   */
  public Adapter createMainShapeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.online_elm.onlineElm.ShapeDef <em>Shape Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.online_elm.onlineElm.ShapeDef
   * @generated
   */
  public Adapter createShapeDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.online_elm.onlineElm.Local_var <em>Local var</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.online_elm.onlineElm.Local_var
   * @generated
   */
  public Adapter createLocal_varAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.online_elm.onlineElm.ShapeList <em>Shape List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.online_elm.onlineElm.ShapeList
   * @generated
   */
  public Adapter createShapeListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.online_elm.onlineElm.BasicShape <em>Basic Shape</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.online_elm.onlineElm.BasicShape
   * @generated
   */
  public Adapter createBasicShapeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.online_elm.onlineElm.Shape <em>Shape</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.online_elm.onlineElm.Shape
   * @generated
   */
  public Adapter createShapeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.online_elm.onlineElm.Conditional_Shape <em>Conditional Shape</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.online_elm.onlineElm.Conditional_Shape
   * @generated
   */
  public Adapter createConditional_ShapeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.online_elm.onlineElm.Conditional_Color <em>Conditional Color</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.online_elm.onlineElm.Conditional_Color
   * @generated
   */
  public Adapter createConditional_ColorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.online_elm.onlineElm.Conditional_Num <em>Conditional Num</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.online_elm.onlineElm.Conditional_Num
   * @generated
   */
  public Adapter createConditional_NumAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.online_elm.onlineElm.Conditional_Str <em>Conditional Str</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.online_elm.onlineElm.Conditional_Str
   * @generated
   */
  public Adapter createConditional_StrAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.online_elm.onlineElm.Bool_expr <em>Bool expr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.online_elm.onlineElm.Bool_expr
   * @generated
   */
  public Adapter createBool_exprAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.online_elm.onlineElm.Or_expr <em>Or expr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.online_elm.onlineElm.Or_expr
   * @generated
   */
  public Adapter createOr_exprAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.online_elm.onlineElm.And_expr <em>And expr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.online_elm.onlineElm.And_expr
   * @generated
   */
  public Adapter createAnd_exprAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.online_elm.onlineElm.Not_expr <em>Not expr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.online_elm.onlineElm.Not_expr
   * @generated
   */
  public Adapter createNot_exprAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.online_elm.onlineElm.Compare_expr <em>Compare expr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.online_elm.onlineElm.Compare_expr
   * @generated
   */
  public Adapter createCompare_exprAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.online_elm.onlineElm.Num_value <em>Num value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.online_elm.onlineElm.Num_value
   * @generated
   */
  public Adapter createNum_valueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.online_elm.onlineElm.Math_exp <em>Math exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.online_elm.onlineElm.Math_exp
   * @generated
   */
  public Adapter createMath_expAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.online_elm.onlineElm.Stencil <em>Stencil</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.online_elm.onlineElm.Stencil
   * @generated
   */
  public Adapter createStencilAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.online_elm.onlineElm.Circle <em>Circle</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.online_elm.onlineElm.Circle
   * @generated
   */
  public Adapter createCircleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.online_elm.onlineElm.Rect <em>Rect</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.online_elm.onlineElm.Rect
   * @generated
   */
  public Adapter createRectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.online_elm.onlineElm.Square <em>Square</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.online_elm.onlineElm.Square
   * @generated
   */
  public Adapter createSquareAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.online_elm.onlineElm.RoundedRect <em>Rounded Rect</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.online_elm.onlineElm.RoundedRect
   * @generated
   */
  public Adapter createRoundedRectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.online_elm.onlineElm.Oval <em>Oval</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.online_elm.onlineElm.Oval
   * @generated
   */
  public Adapter createOvalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.online_elm.onlineElm.Ngon <em>Ngon</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.online_elm.onlineElm.Ngon
   * @generated
   */
  public Adapter createNgonAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.online_elm.onlineElm.Wedge <em>Wedge</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.online_elm.onlineElm.Wedge
   * @generated
   */
  public Adapter createWedgeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.online_elm.onlineElm.Polygon <em>Polygon</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.online_elm.onlineElm.Polygon
   * @generated
   */
  public Adapter createPolygonAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.online_elm.onlineElm.Point <em>Point</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.online_elm.onlineElm.Point
   * @generated
   */
  public Adapter createPointAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.online_elm.onlineElm.Text <em>Text</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.online_elm.onlineElm.Text
   * @generated
   */
  public Adapter createTextAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.online_elm.onlineElm.Draw <em>Draw</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.online_elm.onlineElm.Draw
   * @generated
   */
  public Adapter createDrawAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.online_elm.onlineElm.Filled <em>Filled</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.online_elm.onlineElm.Filled
   * @generated
   */
  public Adapter createFilledAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.online_elm.onlineElm.Outlined <em>Outlined</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.online_elm.onlineElm.Outlined
   * @generated
   */
  public Adapter createOutlinedAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.online_elm.onlineElm.Tranform <em>Tranform</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.online_elm.onlineElm.Tranform
   * @generated
   */
  public Adapter createTranformAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.online_elm.onlineElm.Move <em>Move</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.online_elm.onlineElm.Move
   * @generated
   */
  public Adapter createMoveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.online_elm.onlineElm.Rotate <em>Rotate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.online_elm.onlineElm.Rotate
   * @generated
   */
  public Adapter createRotateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.online_elm.onlineElm.Scale <em>Scale</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.online_elm.onlineElm.Scale
   * @generated
   */
  public Adapter createScaleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.online_elm.onlineElm.ScaleX <em>Scale X</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.online_elm.onlineElm.ScaleX
   * @generated
   */
  public Adapter createScaleXAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.online_elm.onlineElm.ScaleY <em>Scale Y</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.online_elm.onlineElm.ScaleY
   * @generated
   */
  public Adapter createScaleYAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.online_elm.onlineElm.Operation <em>Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.online_elm.onlineElm.Operation
   * @generated
   */
  public Adapter createOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.online_elm.onlineElm.FloatLiteral <em>Float Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.online_elm.onlineElm.FloatLiteral
   * @generated
   */
  public Adapter createFloatLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //OnlineElmAdapterFactory
