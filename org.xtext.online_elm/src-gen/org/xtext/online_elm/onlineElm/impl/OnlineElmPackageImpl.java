/**
 * generated by Xtext 2.24.0
 */
package org.xtext.online_elm.onlineElm.impl;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

import org.xtext.online_elm.onlineElm.BasicShape;
import org.xtext.online_elm.onlineElm.Bool_exp;
import org.xtext.online_elm.onlineElm.Circle;
import org.xtext.online_elm.onlineElm.Color;
import org.xtext.online_elm.onlineElm.Conditional;
import org.xtext.online_elm.onlineElm.Draw;
import org.xtext.online_elm.onlineElm.Fill;
import org.xtext.online_elm.onlineElm.MainShape;
import org.xtext.online_elm.onlineElm.Math_exp;
import org.xtext.online_elm.onlineElm.Move;
import org.xtext.online_elm.onlineElm.Num_value;
import org.xtext.online_elm.onlineElm.OnlineElm;
import org.xtext.online_elm.onlineElm.OnlineElmFactory;
import org.xtext.online_elm.onlineElm.OnlineElmPackage;
import org.xtext.online_elm.onlineElm.Rect;
import org.xtext.online_elm.onlineElm.Shape;
import org.xtext.online_elm.onlineElm.ShapeDef;
import org.xtext.online_elm.onlineElm.ShapeGroup;
import org.xtext.online_elm.onlineElm.Stencil;
import org.xtext.online_elm.onlineElm.Terminal_Bool_exp;
import org.xtext.online_elm.onlineElm.Text;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class OnlineElmPackageImpl extends EPackageImpl implements OnlineElmPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass onlineElmEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass mainShapeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass shapeDefEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass shapeGroupEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass basicShapeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass shapeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass conditionalEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass bool_expEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass terminal_Bool_expEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass num_valueEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass math_expEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stencilEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass circleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass rectEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass textEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass drawEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass fillEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass moveEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum booL_OPEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum matH_OPEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum comparisonEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum colorEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see org.xtext.online_elm.onlineElm.OnlineElmPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private OnlineElmPackageImpl()
  {
    super(eNS_URI, OnlineElmFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link OnlineElmPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static OnlineElmPackage init()
  {
    if (isInited) return (OnlineElmPackage)EPackage.Registry.INSTANCE.getEPackage(OnlineElmPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredOnlineElmPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    OnlineElmPackageImpl theOnlineElmPackage = registeredOnlineElmPackage instanceof OnlineElmPackageImpl ? (OnlineElmPackageImpl)registeredOnlineElmPackage : new OnlineElmPackageImpl();

    isInited = true;

    // Create package meta-data objects
    theOnlineElmPackage.createPackageContents();

    // Initialize created meta-data
    theOnlineElmPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theOnlineElmPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(OnlineElmPackage.eNS_URI, theOnlineElmPackage);
    return theOnlineElmPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getOnlineElm()
  {
    return onlineElmEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getOnlineElm_Entry()
  {
    return (EReference)onlineElmEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getOnlineElm_Shapes()
  {
    return (EReference)onlineElmEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMainShape()
  {
    return mainShapeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMainShape_Name()
  {
    return (EAttribute)mainShapeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMainShape_S1()
  {
    return (EReference)mainShapeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMainShape_S11()
  {
    return (EReference)mainShapeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMainShape_S2()
  {
    return (EReference)mainShapeEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMainShape_S22()
  {
    return (EReference)mainShapeEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMainShape_Sg()
  {
    return (EReference)mainShapeEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getShapeDef()
  {
    return shapeDefEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getShapeDef_Name()
  {
    return (EAttribute)shapeDefEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getShapeGroup()
  {
    return shapeGroupEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getShapeGroup_S1()
  {
    return (EReference)shapeGroupEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getShapeGroup_S11()
  {
    return (EReference)shapeGroupEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getShapeGroup_S2()
  {
    return (EReference)shapeGroupEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getShapeGroup_S22()
  {
    return (EReference)shapeGroupEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getShapeGroup_Sg()
  {
    return (EReference)shapeGroupEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getBasicShape()
  {
    return basicShapeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getBasicShape_Shape()
  {
    return (EReference)basicShapeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getShape()
  {
    return shapeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getShape_Stencil()
  {
    return (EReference)shapeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getShape_Draw()
  {
    return (EReference)shapeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getConditional()
  {
    return conditionalEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getBool_exp()
  {
    return bool_expEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getBool_exp_Exp1()
  {
    return (EReference)bool_expEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getBool_exp_Exp2()
  {
    return (EReference)bool_expEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getBool_exp_Left()
  {
    return (EReference)bool_expEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBool_exp_Operator()
  {
    return (EAttribute)bool_expEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getBool_exp_Rights()
  {
    return (EReference)bool_expEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTerminal_Bool_exp()
  {
    return terminal_Bool_expEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getTerminal_Bool_exp_N1()
  {
    return (EReference)terminal_Bool_expEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getTerminal_Bool_exp_Comp()
  {
    return (EAttribute)terminal_Bool_expEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getTerminal_Bool_exp_N2()
  {
    return (EReference)terminal_Bool_expEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getNum_value()
  {
    return num_valueEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getNum_value_Num()
  {
    return (EAttribute)num_valueEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMath_exp()
  {
    return math_expEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMath_exp_N1()
  {
    return (EAttribute)math_expEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMath_exp_Op1()
  {
    return (EAttribute)math_expEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMath_exp_N2()
  {
    return (EAttribute)math_expEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getStencil()
  {
    return stencilEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getStencil_Name()
  {
    return (EAttribute)stencilEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCircle()
  {
    return circleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCircle_Diameter()
  {
    return (EAttribute)circleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getRect()
  {
    return rectEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getRect_EdgeX()
  {
    return (EAttribute)rectEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getRect_EdgeY()
  {
    return (EAttribute)rectEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getText()
  {
    return textEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getText_Content()
  {
    return (EAttribute)textEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDraw()
  {
    return drawEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDraw_FilledColor()
  {
    return (EReference)drawEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDraw_Position()
  {
    return (EReference)drawEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getFill()
  {
    return fillEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getFill_Name()
  {
    return (EAttribute)fillEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getFill_Color()
  {
    return (EAttribute)fillEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMove()
  {
    return moveEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMove_Name()
  {
    return (EAttribute)moveEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMove_X()
  {
    return (EReference)moveEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMove_Y()
  {
    return (EReference)moveEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getBOOL_OP()
  {
    return booL_OPEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getMATH_OP()
  {
    return matH_OPEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getCOMPARISON()
  {
    return comparisonEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getColor()
  {
    return colorEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OnlineElmFactory getOnlineElmFactory()
  {
    return (OnlineElmFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    onlineElmEClass = createEClass(ONLINE_ELM);
    createEReference(onlineElmEClass, ONLINE_ELM__ENTRY);
    createEReference(onlineElmEClass, ONLINE_ELM__SHAPES);

    mainShapeEClass = createEClass(MAIN_SHAPE);
    createEAttribute(mainShapeEClass, MAIN_SHAPE__NAME);
    createEReference(mainShapeEClass, MAIN_SHAPE__S1);
    createEReference(mainShapeEClass, MAIN_SHAPE__S11);
    createEReference(mainShapeEClass, MAIN_SHAPE__S2);
    createEReference(mainShapeEClass, MAIN_SHAPE__S22);
    createEReference(mainShapeEClass, MAIN_SHAPE__SG);

    shapeDefEClass = createEClass(SHAPE_DEF);
    createEAttribute(shapeDefEClass, SHAPE_DEF__NAME);

    shapeGroupEClass = createEClass(SHAPE_GROUP);
    createEReference(shapeGroupEClass, SHAPE_GROUP__S1);
    createEReference(shapeGroupEClass, SHAPE_GROUP__S11);
    createEReference(shapeGroupEClass, SHAPE_GROUP__S2);
    createEReference(shapeGroupEClass, SHAPE_GROUP__S22);
    createEReference(shapeGroupEClass, SHAPE_GROUP__SG);

    basicShapeEClass = createEClass(BASIC_SHAPE);
    createEReference(basicShapeEClass, BASIC_SHAPE__SHAPE);

    shapeEClass = createEClass(SHAPE);
    createEReference(shapeEClass, SHAPE__STENCIL);
    createEReference(shapeEClass, SHAPE__DRAW);

    conditionalEClass = createEClass(CONDITIONAL);

    bool_expEClass = createEClass(BOOL_EXP);
    createEReference(bool_expEClass, BOOL_EXP__EXP1);
    createEReference(bool_expEClass, BOOL_EXP__EXP2);
    createEReference(bool_expEClass, BOOL_EXP__LEFT);
    createEAttribute(bool_expEClass, BOOL_EXP__OPERATOR);
    createEReference(bool_expEClass, BOOL_EXP__RIGHTS);

    terminal_Bool_expEClass = createEClass(TERMINAL_BOOL_EXP);
    createEReference(terminal_Bool_expEClass, TERMINAL_BOOL_EXP__N1);
    createEAttribute(terminal_Bool_expEClass, TERMINAL_BOOL_EXP__COMP);
    createEReference(terminal_Bool_expEClass, TERMINAL_BOOL_EXP__N2);

    num_valueEClass = createEClass(NUM_VALUE);
    createEAttribute(num_valueEClass, NUM_VALUE__NUM);

    math_expEClass = createEClass(MATH_EXP);
    createEAttribute(math_expEClass, MATH_EXP__N1);
    createEAttribute(math_expEClass, MATH_EXP__OP1);
    createEAttribute(math_expEClass, MATH_EXP__N2);

    stencilEClass = createEClass(STENCIL);
    createEAttribute(stencilEClass, STENCIL__NAME);

    circleEClass = createEClass(CIRCLE);
    createEAttribute(circleEClass, CIRCLE__DIAMETER);

    rectEClass = createEClass(RECT);
    createEAttribute(rectEClass, RECT__EDGE_X);
    createEAttribute(rectEClass, RECT__EDGE_Y);

    textEClass = createEClass(TEXT);
    createEAttribute(textEClass, TEXT__CONTENT);

    drawEClass = createEClass(DRAW);
    createEReference(drawEClass, DRAW__FILLED_COLOR);
    createEReference(drawEClass, DRAW__POSITION);

    fillEClass = createEClass(FILL);
    createEAttribute(fillEClass, FILL__NAME);
    createEAttribute(fillEClass, FILL__COLOR);

    moveEClass = createEClass(MOVE);
    createEAttribute(moveEClass, MOVE__NAME);
    createEReference(moveEClass, MOVE__X);
    createEReference(moveEClass, MOVE__Y);

    // Create enums
    booL_OPEEnum = createEEnum(BOOL_OP);
    matH_OPEEnum = createEEnum(MATH_OP);
    comparisonEEnum = createEEnum(COMPARISON);
    colorEEnum = createEEnum(COLOR);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    shapeGroupEClass.getESuperTypes().add(this.getShapeDef());
    basicShapeEClass.getESuperTypes().add(this.getShapeDef());
    conditionalEClass.getESuperTypes().add(this.getShape());
    bool_expEClass.getESuperTypes().add(this.getConditional());
    math_expEClass.getESuperTypes().add(this.getNum_value());
    circleEClass.getESuperTypes().add(this.getStencil());
    rectEClass.getESuperTypes().add(this.getStencil());
    textEClass.getESuperTypes().add(this.getStencil());

    // Initialize classes and features; add operations and parameters
    initEClass(onlineElmEClass, OnlineElm.class, "OnlineElm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getOnlineElm_Entry(), this.getMainShape(), null, "entry", null, 0, 1, OnlineElm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getOnlineElm_Shapes(), this.getShapeDef(), null, "shapes", null, 0, -1, OnlineElm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(mainShapeEClass, MainShape.class, "MainShape", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getMainShape_Name(), ecorePackage.getEString(), "name", null, 0, 1, MainShape.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMainShape_S1(), this.getShape(), null, "s1", null, 0, 1, MainShape.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMainShape_S11(), this.getBasicShape(), null, "s11", null, 0, 1, MainShape.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMainShape_S2(), this.getShape(), null, "s2", null, 0, -1, MainShape.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMainShape_S22(), this.getBasicShape(), null, "s22", null, 0, -1, MainShape.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMainShape_Sg(), this.getShapeGroup(), null, "sg", null, 0, -1, MainShape.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(shapeDefEClass, ShapeDef.class, "ShapeDef", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getShapeDef_Name(), ecorePackage.getEString(), "name", null, 0, 1, ShapeDef.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(shapeGroupEClass, ShapeGroup.class, "ShapeGroup", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getShapeGroup_S1(), this.getShape(), null, "s1", null, 0, 1, ShapeGroup.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getShapeGroup_S11(), this.getBasicShape(), null, "s11", null, 0, 1, ShapeGroup.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getShapeGroup_S2(), this.getShape(), null, "s2", null, 0, -1, ShapeGroup.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getShapeGroup_S22(), this.getBasicShape(), null, "s22", null, 0, -1, ShapeGroup.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getShapeGroup_Sg(), this.getShapeGroup(), null, "sg", null, 0, -1, ShapeGroup.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(basicShapeEClass, BasicShape.class, "BasicShape", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getBasicShape_Shape(), this.getShape(), null, "shape", null, 0, 1, BasicShape.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(shapeEClass, Shape.class, "Shape", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getShape_Stencil(), this.getStencil(), null, "stencil", null, 0, 1, Shape.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getShape_Draw(), this.getDraw(), null, "draw", null, 0, 1, Shape.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(conditionalEClass, Conditional.class, "Conditional", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(bool_expEClass, Bool_exp.class, "Bool_exp", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getBool_exp_Exp1(), this.getShape(), null, "exp1", null, 0, 1, Bool_exp.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getBool_exp_Exp2(), this.getShape(), null, "exp2", null, 0, 1, Bool_exp.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getBool_exp_Left(), this.getTerminal_Bool_exp(), null, "left", null, 0, 1, Bool_exp.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBool_exp_Operator(), this.getBOOL_OP(), "operator", null, 0, -1, Bool_exp.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getBool_exp_Rights(), this.getTerminal_Bool_exp(), null, "rights", null, 0, -1, Bool_exp.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(terminal_Bool_expEClass, Terminal_Bool_exp.class, "Terminal_Bool_exp", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getTerminal_Bool_exp_N1(), this.getNum_value(), null, "n1", null, 0, 1, Terminal_Bool_exp.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getTerminal_Bool_exp_Comp(), this.getCOMPARISON(), "comp", null, 0, 1, Terminal_Bool_exp.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getTerminal_Bool_exp_N2(), this.getNum_value(), null, "n2", null, 0, 1, Terminal_Bool_exp.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(num_valueEClass, Num_value.class, "Num_value", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getNum_value_Num(), ecorePackage.getEFloat(), "num", null, 0, 1, Num_value.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(math_expEClass, Math_exp.class, "Math_exp", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getMath_exp_N1(), ecorePackage.getEFloat(), "n1", null, 0, 1, Math_exp.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMath_exp_Op1(), this.getMATH_OP(), "op1", null, 0, 1, Math_exp.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMath_exp_N2(), ecorePackage.getEFloat(), "n2", null, 0, 1, Math_exp.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(stencilEClass, Stencil.class, "Stencil", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getStencil_Name(), ecorePackage.getEString(), "name", null, 0, 1, Stencil.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(circleEClass, Circle.class, "Circle", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCircle_Diameter(), ecorePackage.getEFloat(), "diameter", null, 0, 1, Circle.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(rectEClass, Rect.class, "Rect", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getRect_EdgeX(), ecorePackage.getEFloat(), "edgeX", null, 0, 1, Rect.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getRect_EdgeY(), ecorePackage.getEFloat(), "edgeY", null, 0, 1, Rect.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(textEClass, Text.class, "Text", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getText_Content(), ecorePackage.getEString(), "content", null, 0, 1, Text.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(drawEClass, Draw.class, "Draw", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDraw_FilledColor(), this.getFill(), null, "filledColor", null, 0, 1, Draw.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDraw_Position(), this.getMove(), null, "position", null, 0, 1, Draw.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(fillEClass, Fill.class, "Fill", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getFill_Name(), ecorePackage.getEString(), "name", null, 0, 1, Fill.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getFill_Color(), this.getColor(), "color", null, 0, 1, Fill.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(moveEClass, Move.class, "Move", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getMove_Name(), ecorePackage.getEString(), "name", null, 0, 1, Move.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMove_X(), this.getNum_value(), null, "x", null, 0, 1, Move.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMove_Y(), this.getNum_value(), null, "y", null, 0, 1, Move.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Initialize enums and add enum literals
    initEEnum(booL_OPEEnum, org.xtext.online_elm.onlineElm.BOOL_OP.class, "BOOL_OP");
    addEEnumLiteral(booL_OPEEnum, org.xtext.online_elm.onlineElm.BOOL_OP.AND);
    addEEnumLiteral(booL_OPEEnum, org.xtext.online_elm.onlineElm.BOOL_OP.OR);

    initEEnum(matH_OPEEnum, org.xtext.online_elm.onlineElm.MATH_OP.class, "MATH_OP");
    addEEnumLiteral(matH_OPEEnum, org.xtext.online_elm.onlineElm.MATH_OP.PLUS);
    addEEnumLiteral(matH_OPEEnum, org.xtext.online_elm.onlineElm.MATH_OP.MINUS);
    addEEnumLiteral(matH_OPEEnum, org.xtext.online_elm.onlineElm.MATH_OP.TIMES);
    addEEnumLiteral(matH_OPEEnum, org.xtext.online_elm.onlineElm.MATH_OP.DIVIDE);

    initEEnum(comparisonEEnum, org.xtext.online_elm.onlineElm.COMPARISON.class, "COMPARISON");
    addEEnumLiteral(comparisonEEnum, org.xtext.online_elm.onlineElm.COMPARISON.BIGGER);
    addEEnumLiteral(comparisonEEnum, org.xtext.online_elm.onlineElm.COMPARISON.NO_LESS_THAN);
    addEEnumLiteral(comparisonEEnum, org.xtext.online_elm.onlineElm.COMPARISON.SMALLER);
    addEEnumLiteral(comparisonEEnum, org.xtext.online_elm.onlineElm.COMPARISON.NO_BIGGER_THAN);
    addEEnumLiteral(comparisonEEnum, org.xtext.online_elm.onlineElm.COMPARISON.EQUAL);

    initEEnum(colorEEnum, Color.class, "Color");
    addEEnumLiteral(colorEEnum, Color.BLACK);
    addEEnumLiteral(colorEEnum, Color.RED);
    addEEnumLiteral(colorEEnum, Color.BLUE);

    // Create resource
    createResource(eNS_URI);
  }

} //OnlineElmPackageImpl
