/**
 * generated by Xtext 2.24.0
 */
package org.xtext.online_elm.onlineElm.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.online_elm.onlineElm.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class OnlineElmFactoryImpl extends EFactoryImpl implements OnlineElmFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static OnlineElmFactory init()
  {
    try
    {
      OnlineElmFactory theOnlineElmFactory = (OnlineElmFactory)EPackage.Registry.INSTANCE.getEFactory(OnlineElmPackage.eNS_URI);
      if (theOnlineElmFactory != null)
      {
        return theOnlineElmFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new OnlineElmFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OnlineElmFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case OnlineElmPackage.ONLINE_ELM: return createOnlineElm();
      case OnlineElmPackage.MAIN_SHAPE: return createMainShape();
      case OnlineElmPackage.SHAPE_DEF: return createShapeDef();
      case OnlineElmPackage.LOCAL_VAR: return createLocal_var();
      case OnlineElmPackage.SHAPE_LIST: return createShapeList();
      case OnlineElmPackage.BASIC_SHAPE: return createBasicShape();
      case OnlineElmPackage.SHAPE: return createShape();
      case OnlineElmPackage.CONDITIONAL_SHAPE: return createConditional_Shape();
      case OnlineElmPackage.CONDITIONAL_COLOR: return createConditional_Color();
      case OnlineElmPackage.CONDITIONAL_NUM: return createConditional_Num();
      case OnlineElmPackage.CONDITIONAL_STR: return createConditional_Str();
      case OnlineElmPackage.BOOL_EXPR: return createBool_expr();
      case OnlineElmPackage.OR_EXPR: return createOr_expr();
      case OnlineElmPackage.AND_EXPR: return createAnd_expr();
      case OnlineElmPackage.NOT_EXPR: return createNot_expr();
      case OnlineElmPackage.COMPARE_EXPR: return createCompare_expr();
      case OnlineElmPackage.NUM_VALUE: return createNum_value();
      case OnlineElmPackage.MATH_EXP: return createMath_exp();
      case OnlineElmPackage.STENCIL: return createStencil();
      case OnlineElmPackage.CIRCLE: return createCircle();
      case OnlineElmPackage.RECT: return createRect();
      case OnlineElmPackage.SQUARE: return createSquare();
      case OnlineElmPackage.ROUNDED_RECT: return createRoundedRect();
      case OnlineElmPackage.OVAL: return createOval();
      case OnlineElmPackage.NGON: return createNgon();
      case OnlineElmPackage.WEDGE: return createWedge();
      case OnlineElmPackage.POLYGON: return createPolygon();
      case OnlineElmPackage.POINT: return createPoint();
      case OnlineElmPackage.TEXT: return createText();
      case OnlineElmPackage.DRAW: return createDraw();
      case OnlineElmPackage.FILLED: return createFilled();
      case OnlineElmPackage.OUTLINED: return createOutlined();
      case OnlineElmPackage.TRANFORM: return createTranform();
      case OnlineElmPackage.MOVE: return createMove();
      case OnlineElmPackage.ROTATE: return createRotate();
      case OnlineElmPackage.SCALE: return createScale();
      case OnlineElmPackage.SCALE_X: return createScaleX();
      case OnlineElmPackage.SCALE_Y: return createScaleY();
      case OnlineElmPackage.OPERATION: return createOperation();
      case OnlineElmPackage.FLOAT_LITERAL: return createFloatLiteral();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case OnlineElmPackage.MATH_OP:
        return createMATH_OPFromString(eDataType, initialValue);
      case OnlineElmPackage.LINE_TYPE:
        return createLineTypeFromString(eDataType, initialValue);
      case OnlineElmPackage.COLOR:
        return createColorFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case OnlineElmPackage.MATH_OP:
        return convertMATH_OPToString(eDataType, instanceValue);
      case OnlineElmPackage.LINE_TYPE:
        return convertLineTypeToString(eDataType, instanceValue);
      case OnlineElmPackage.COLOR:
        return convertColorToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OnlineElm createOnlineElm()
  {
    OnlineElmImpl onlineElm = new OnlineElmImpl();
    return onlineElm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MainShape createMainShape()
  {
    MainShapeImpl mainShape = new MainShapeImpl();
    return mainShape;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ShapeDef createShapeDef()
  {
    ShapeDefImpl shapeDef = new ShapeDefImpl();
    return shapeDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Local_var createLocal_var()
  {
    Local_varImpl local_var = new Local_varImpl();
    return local_var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ShapeList createShapeList()
  {
    ShapeListImpl shapeList = new ShapeListImpl();
    return shapeList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BasicShape createBasicShape()
  {
    BasicShapeImpl basicShape = new BasicShapeImpl();
    return basicShape;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Shape createShape()
  {
    ShapeImpl shape = new ShapeImpl();
    return shape;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Conditional_Shape createConditional_Shape()
  {
    Conditional_ShapeImpl conditional_Shape = new Conditional_ShapeImpl();
    return conditional_Shape;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Conditional_Color createConditional_Color()
  {
    Conditional_ColorImpl conditional_Color = new Conditional_ColorImpl();
    return conditional_Color;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Conditional_Num createConditional_Num()
  {
    Conditional_NumImpl conditional_Num = new Conditional_NumImpl();
    return conditional_Num;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Conditional_Str createConditional_Str()
  {
    Conditional_StrImpl conditional_Str = new Conditional_StrImpl();
    return conditional_Str;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Bool_expr createBool_expr()
  {
    Bool_exprImpl bool_expr = new Bool_exprImpl();
    return bool_expr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Or_expr createOr_expr()
  {
    Or_exprImpl or_expr = new Or_exprImpl();
    return or_expr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public And_expr createAnd_expr()
  {
    And_exprImpl and_expr = new And_exprImpl();
    return and_expr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Not_expr createNot_expr()
  {
    Not_exprImpl not_expr = new Not_exprImpl();
    return not_expr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Compare_expr createCompare_expr()
  {
    Compare_exprImpl compare_expr = new Compare_exprImpl();
    return compare_expr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Num_value createNum_value()
  {
    Num_valueImpl num_value = new Num_valueImpl();
    return num_value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Math_exp createMath_exp()
  {
    Math_expImpl math_exp = new Math_expImpl();
    return math_exp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Stencil createStencil()
  {
    StencilImpl stencil = new StencilImpl();
    return stencil;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Circle createCircle()
  {
    CircleImpl circle = new CircleImpl();
    return circle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rect createRect()
  {
    RectImpl rect = new RectImpl();
    return rect;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Square createSquare()
  {
    SquareImpl square = new SquareImpl();
    return square;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RoundedRect createRoundedRect()
  {
    RoundedRectImpl roundedRect = new RoundedRectImpl();
    return roundedRect;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Oval createOval()
  {
    OvalImpl oval = new OvalImpl();
    return oval;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Ngon createNgon()
  {
    NgonImpl ngon = new NgonImpl();
    return ngon;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Wedge createWedge()
  {
    WedgeImpl wedge = new WedgeImpl();
    return wedge;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Polygon createPolygon()
  {
    PolygonImpl polygon = new PolygonImpl();
    return polygon;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Point createPoint()
  {
    PointImpl point = new PointImpl();
    return point;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Text createText()
  {
    TextImpl text = new TextImpl();
    return text;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Draw createDraw()
  {
    DrawImpl draw = new DrawImpl();
    return draw;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Filled createFilled()
  {
    FilledImpl filled = new FilledImpl();
    return filled;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Outlined createOutlined()
  {
    OutlinedImpl outlined = new OutlinedImpl();
    return outlined;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Tranform createTranform()
  {
    TranformImpl tranform = new TranformImpl();
    return tranform;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Move createMove()
  {
    MoveImpl move = new MoveImpl();
    return move;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rotate createRotate()
  {
    RotateImpl rotate = new RotateImpl();
    return rotate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Scale createScale()
  {
    ScaleImpl scale = new ScaleImpl();
    return scale;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ScaleX createScaleX()
  {
    ScaleXImpl scaleX = new ScaleXImpl();
    return scaleX;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ScaleY createScaleY()
  {
    ScaleYImpl scaleY = new ScaleYImpl();
    return scaleY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Operation createOperation()
  {
    OperationImpl operation = new OperationImpl();
    return operation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FloatLiteral createFloatLiteral()
  {
    FloatLiteralImpl floatLiteral = new FloatLiteralImpl();
    return floatLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MATH_OP createMATH_OPFromString(EDataType eDataType, String initialValue)
  {
    MATH_OP result = MATH_OP.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertMATH_OPToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LineType createLineTypeFromString(EDataType eDataType, String initialValue)
  {
    LineType result = LineType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertLineTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Color createColorFromString(EDataType eDataType, String initialValue)
  {
    Color result = Color.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertColorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OnlineElmPackage getOnlineElmPackage()
  {
    return (OnlineElmPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static OnlineElmPackage getPackage()
  {
    return OnlineElmPackage.eINSTANCE;
  }

} //OnlineElmFactoryImpl
