/**
 * generated by Xtext 2.24.0
 */
package org.xtext.online_elm.onlineElm.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.online_elm.onlineElm.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class OnlineElmFactoryImpl extends EFactoryImpl implements OnlineElmFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static OnlineElmFactory init()
  {
    try
    {
      OnlineElmFactory theOnlineElmFactory = (OnlineElmFactory)EPackage.Registry.INSTANCE.getEFactory(OnlineElmPackage.eNS_URI);
      if (theOnlineElmFactory != null)
      {
        return theOnlineElmFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new OnlineElmFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OnlineElmFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case OnlineElmPackage.ONLINE_ELM: return createOnlineElm();
      case OnlineElmPackage.MAIN_SHAPE: return createMainShape();
      case OnlineElmPackage.SHAPE_DEF: return createShapeDef();
      case OnlineElmPackage.SHAPE_GROUP: return createShapeGroup();
      case OnlineElmPackage.BASIC_SHAPE: return createBasicShape();
      case OnlineElmPackage.SHAPE: return createShape();
      case OnlineElmPackage.CONDITIONAL: return createConditional();
      case OnlineElmPackage.BOOL_EXP: return createBool_exp();
      case OnlineElmPackage.TERMINAL_BOOL_EXP: return createTerminal_Bool_exp();
      case OnlineElmPackage.NUM_VALUE: return createNum_value();
      case OnlineElmPackage.MATH_EXP: return createMath_exp();
      case OnlineElmPackage.STENCIL: return createStencil();
      case OnlineElmPackage.CIRCLE: return createCircle();
      case OnlineElmPackage.RECT: return createRect();
      case OnlineElmPackage.TEXT: return createText();
      case OnlineElmPackage.DRAW: return createDraw();
      case OnlineElmPackage.FILL: return createFill();
      case OnlineElmPackage.MOVE: return createMove();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case OnlineElmPackage.BOOL_OP:
        return createBOOL_OPFromString(eDataType, initialValue);
      case OnlineElmPackage.MATH_OP:
        return createMATH_OPFromString(eDataType, initialValue);
      case OnlineElmPackage.COMPARISON:
        return createCOMPARISONFromString(eDataType, initialValue);
      case OnlineElmPackage.COLOR:
        return createColorFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case OnlineElmPackage.BOOL_OP:
        return convertBOOL_OPToString(eDataType, instanceValue);
      case OnlineElmPackage.MATH_OP:
        return convertMATH_OPToString(eDataType, instanceValue);
      case OnlineElmPackage.COMPARISON:
        return convertCOMPARISONToString(eDataType, instanceValue);
      case OnlineElmPackage.COLOR:
        return convertColorToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OnlineElm createOnlineElm()
  {
    OnlineElmImpl onlineElm = new OnlineElmImpl();
    return onlineElm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MainShape createMainShape()
  {
    MainShapeImpl mainShape = new MainShapeImpl();
    return mainShape;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ShapeDef createShapeDef()
  {
    ShapeDefImpl shapeDef = new ShapeDefImpl();
    return shapeDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ShapeGroup createShapeGroup()
  {
    ShapeGroupImpl shapeGroup = new ShapeGroupImpl();
    return shapeGroup;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BasicShape createBasicShape()
  {
    BasicShapeImpl basicShape = new BasicShapeImpl();
    return basicShape;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Shape createShape()
  {
    ShapeImpl shape = new ShapeImpl();
    return shape;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Conditional createConditional()
  {
    ConditionalImpl conditional = new ConditionalImpl();
    return conditional;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Bool_exp createBool_exp()
  {
    Bool_expImpl bool_exp = new Bool_expImpl();
    return bool_exp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Terminal_Bool_exp createTerminal_Bool_exp()
  {
    Terminal_Bool_expImpl terminal_Bool_exp = new Terminal_Bool_expImpl();
    return terminal_Bool_exp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Num_value createNum_value()
  {
    Num_valueImpl num_value = new Num_valueImpl();
    return num_value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Math_exp createMath_exp()
  {
    Math_expImpl math_exp = new Math_expImpl();
    return math_exp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Stencil createStencil()
  {
    StencilImpl stencil = new StencilImpl();
    return stencil;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Circle createCircle()
  {
    CircleImpl circle = new CircleImpl();
    return circle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rect createRect()
  {
    RectImpl rect = new RectImpl();
    return rect;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Text createText()
  {
    TextImpl text = new TextImpl();
    return text;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Draw createDraw()
  {
    DrawImpl draw = new DrawImpl();
    return draw;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Fill createFill()
  {
    FillImpl fill = new FillImpl();
    return fill;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Move createMove()
  {
    MoveImpl move = new MoveImpl();
    return move;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BOOL_OP createBOOL_OPFromString(EDataType eDataType, String initialValue)
  {
    BOOL_OP result = BOOL_OP.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertBOOL_OPToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MATH_OP createMATH_OPFromString(EDataType eDataType, String initialValue)
  {
    MATH_OP result = MATH_OP.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertMATH_OPToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public COMPARISON createCOMPARISONFromString(EDataType eDataType, String initialValue)
  {
    COMPARISON result = COMPARISON.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertCOMPARISONToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Color createColorFromString(EDataType eDataType, String initialValue)
  {
    Color result = Color.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertColorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OnlineElmPackage getOnlineElmPackage()
  {
    return (OnlineElmPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static OnlineElmPackage getPackage()
  {
    return OnlineElmPackage.eINSTANCE;
  }

} //OnlineElmFactoryImpl
