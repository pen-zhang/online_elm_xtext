/**
 * generated by Xtext 2.24.0
 */
package org.xtext.online_elm.onlineElm.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.online_elm.onlineElm.BasicShape;
import org.xtext.online_elm.onlineElm.Conditional_Shape;
import org.xtext.online_elm.onlineElm.MainShape;
import org.xtext.online_elm.onlineElm.OnlineElmPackage;
import org.xtext.online_elm.onlineElm.Shape;
import org.xtext.online_elm.onlineElm.ShapeList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Main Shape</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.online_elm.onlineElm.impl.MainShapeImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.online_elm.onlineElm.impl.MainShapeImpl#getShape <em>Shape</em>}</li>
 *   <li>{@link org.xtext.online_elm.onlineElm.impl.MainShapeImpl#getConditional <em>Conditional</em>}</li>
 *   <li>{@link org.xtext.online_elm.onlineElm.impl.MainShapeImpl#getShapeRef <em>Shape Ref</em>}</li>
 *   <li>{@link org.xtext.online_elm.onlineElm.impl.MainShapeImpl#getMoreShapes <em>More Shapes</em>}</li>
 *   <li>{@link org.xtext.online_elm.onlineElm.impl.MainShapeImpl#getMoreConditional <em>More Conditional</em>}</li>
 *   <li>{@link org.xtext.online_elm.onlineElm.impl.MainShapeImpl#getMoreShapeRef <em>More Shape Ref</em>}</li>
 *   <li>{@link org.xtext.online_elm.onlineElm.impl.MainShapeImpl#getExternal <em>External</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MainShapeImpl extends MinimalEObjectImpl.Container implements MainShape
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getShape() <em>Shape</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getShape()
   * @generated
   * @ordered
   */
  protected Shape shape;

  /**
   * The cached value of the '{@link #getConditional() <em>Conditional</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConditional()
   * @generated
   * @ordered
   */
  protected Conditional_Shape conditional;

  /**
   * The cached value of the '{@link #getShapeRef() <em>Shape Ref</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getShapeRef()
   * @generated
   * @ordered
   */
  protected BasicShape shapeRef;

  /**
   * The cached value of the '{@link #getMoreShapes() <em>More Shapes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMoreShapes()
   * @generated
   * @ordered
   */
  protected EList<Shape> moreShapes;

  /**
   * The cached value of the '{@link #getMoreConditional() <em>More Conditional</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMoreConditional()
   * @generated
   * @ordered
   */
  protected EList<Conditional_Shape> moreConditional;

  /**
   * The cached value of the '{@link #getMoreShapeRef() <em>More Shape Ref</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMoreShapeRef()
   * @generated
   * @ordered
   */
  protected EList<BasicShape> moreShapeRef;

  /**
   * The cached value of the '{@link #getExternal() <em>External</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExternal()
   * @generated
   * @ordered
   */
  protected EList<ShapeList> external;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MainShapeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OnlineElmPackage.Literals.MAIN_SHAPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OnlineElmPackage.MAIN_SHAPE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Shape getShape()
  {
    return shape;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetShape(Shape newShape, NotificationChain msgs)
  {
    Shape oldShape = shape;
    shape = newShape;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OnlineElmPackage.MAIN_SHAPE__SHAPE, oldShape, newShape);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setShape(Shape newShape)
  {
    if (newShape != shape)
    {
      NotificationChain msgs = null;
      if (shape != null)
        msgs = ((InternalEObject)shape).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OnlineElmPackage.MAIN_SHAPE__SHAPE, null, msgs);
      if (newShape != null)
        msgs = ((InternalEObject)newShape).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OnlineElmPackage.MAIN_SHAPE__SHAPE, null, msgs);
      msgs = basicSetShape(newShape, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OnlineElmPackage.MAIN_SHAPE__SHAPE, newShape, newShape));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Conditional_Shape getConditional()
  {
    return conditional;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConditional(Conditional_Shape newConditional, NotificationChain msgs)
  {
    Conditional_Shape oldConditional = conditional;
    conditional = newConditional;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OnlineElmPackage.MAIN_SHAPE__CONDITIONAL, oldConditional, newConditional);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConditional(Conditional_Shape newConditional)
  {
    if (newConditional != conditional)
    {
      NotificationChain msgs = null;
      if (conditional != null)
        msgs = ((InternalEObject)conditional).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OnlineElmPackage.MAIN_SHAPE__CONDITIONAL, null, msgs);
      if (newConditional != null)
        msgs = ((InternalEObject)newConditional).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OnlineElmPackage.MAIN_SHAPE__CONDITIONAL, null, msgs);
      msgs = basicSetConditional(newConditional, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OnlineElmPackage.MAIN_SHAPE__CONDITIONAL, newConditional, newConditional));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BasicShape getShapeRef()
  {
    if (shapeRef != null && shapeRef.eIsProxy())
    {
      InternalEObject oldShapeRef = (InternalEObject)shapeRef;
      shapeRef = (BasicShape)eResolveProxy(oldShapeRef);
      if (shapeRef != oldShapeRef)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, OnlineElmPackage.MAIN_SHAPE__SHAPE_REF, oldShapeRef, shapeRef));
      }
    }
    return shapeRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BasicShape basicGetShapeRef()
  {
    return shapeRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setShapeRef(BasicShape newShapeRef)
  {
    BasicShape oldShapeRef = shapeRef;
    shapeRef = newShapeRef;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OnlineElmPackage.MAIN_SHAPE__SHAPE_REF, oldShapeRef, shapeRef));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Shape> getMoreShapes()
  {
    if (moreShapes == null)
    {
      moreShapes = new EObjectContainmentEList<Shape>(Shape.class, this, OnlineElmPackage.MAIN_SHAPE__MORE_SHAPES);
    }
    return moreShapes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Conditional_Shape> getMoreConditional()
  {
    if (moreConditional == null)
    {
      moreConditional = new EObjectContainmentEList<Conditional_Shape>(Conditional_Shape.class, this, OnlineElmPackage.MAIN_SHAPE__MORE_CONDITIONAL);
    }
    return moreConditional;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<BasicShape> getMoreShapeRef()
  {
    if (moreShapeRef == null)
    {
      moreShapeRef = new EObjectResolvingEList<BasicShape>(BasicShape.class, this, OnlineElmPackage.MAIN_SHAPE__MORE_SHAPE_REF);
    }
    return moreShapeRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ShapeList> getExternal()
  {
    if (external == null)
    {
      external = new EObjectResolvingEList<ShapeList>(ShapeList.class, this, OnlineElmPackage.MAIN_SHAPE__EXTERNAL);
    }
    return external;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OnlineElmPackage.MAIN_SHAPE__SHAPE:
        return basicSetShape(null, msgs);
      case OnlineElmPackage.MAIN_SHAPE__CONDITIONAL:
        return basicSetConditional(null, msgs);
      case OnlineElmPackage.MAIN_SHAPE__MORE_SHAPES:
        return ((InternalEList<?>)getMoreShapes()).basicRemove(otherEnd, msgs);
      case OnlineElmPackage.MAIN_SHAPE__MORE_CONDITIONAL:
        return ((InternalEList<?>)getMoreConditional()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OnlineElmPackage.MAIN_SHAPE__NAME:
        return getName();
      case OnlineElmPackage.MAIN_SHAPE__SHAPE:
        return getShape();
      case OnlineElmPackage.MAIN_SHAPE__CONDITIONAL:
        return getConditional();
      case OnlineElmPackage.MAIN_SHAPE__SHAPE_REF:
        if (resolve) return getShapeRef();
        return basicGetShapeRef();
      case OnlineElmPackage.MAIN_SHAPE__MORE_SHAPES:
        return getMoreShapes();
      case OnlineElmPackage.MAIN_SHAPE__MORE_CONDITIONAL:
        return getMoreConditional();
      case OnlineElmPackage.MAIN_SHAPE__MORE_SHAPE_REF:
        return getMoreShapeRef();
      case OnlineElmPackage.MAIN_SHAPE__EXTERNAL:
        return getExternal();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OnlineElmPackage.MAIN_SHAPE__NAME:
        setName((String)newValue);
        return;
      case OnlineElmPackage.MAIN_SHAPE__SHAPE:
        setShape((Shape)newValue);
        return;
      case OnlineElmPackage.MAIN_SHAPE__CONDITIONAL:
        setConditional((Conditional_Shape)newValue);
        return;
      case OnlineElmPackage.MAIN_SHAPE__SHAPE_REF:
        setShapeRef((BasicShape)newValue);
        return;
      case OnlineElmPackage.MAIN_SHAPE__MORE_SHAPES:
        getMoreShapes().clear();
        getMoreShapes().addAll((Collection<? extends Shape>)newValue);
        return;
      case OnlineElmPackage.MAIN_SHAPE__MORE_CONDITIONAL:
        getMoreConditional().clear();
        getMoreConditional().addAll((Collection<? extends Conditional_Shape>)newValue);
        return;
      case OnlineElmPackage.MAIN_SHAPE__MORE_SHAPE_REF:
        getMoreShapeRef().clear();
        getMoreShapeRef().addAll((Collection<? extends BasicShape>)newValue);
        return;
      case OnlineElmPackage.MAIN_SHAPE__EXTERNAL:
        getExternal().clear();
        getExternal().addAll((Collection<? extends ShapeList>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OnlineElmPackage.MAIN_SHAPE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case OnlineElmPackage.MAIN_SHAPE__SHAPE:
        setShape((Shape)null);
        return;
      case OnlineElmPackage.MAIN_SHAPE__CONDITIONAL:
        setConditional((Conditional_Shape)null);
        return;
      case OnlineElmPackage.MAIN_SHAPE__SHAPE_REF:
        setShapeRef((BasicShape)null);
        return;
      case OnlineElmPackage.MAIN_SHAPE__MORE_SHAPES:
        getMoreShapes().clear();
        return;
      case OnlineElmPackage.MAIN_SHAPE__MORE_CONDITIONAL:
        getMoreConditional().clear();
        return;
      case OnlineElmPackage.MAIN_SHAPE__MORE_SHAPE_REF:
        getMoreShapeRef().clear();
        return;
      case OnlineElmPackage.MAIN_SHAPE__EXTERNAL:
        getExternal().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OnlineElmPackage.MAIN_SHAPE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case OnlineElmPackage.MAIN_SHAPE__SHAPE:
        return shape != null;
      case OnlineElmPackage.MAIN_SHAPE__CONDITIONAL:
        return conditional != null;
      case OnlineElmPackage.MAIN_SHAPE__SHAPE_REF:
        return shapeRef != null;
      case OnlineElmPackage.MAIN_SHAPE__MORE_SHAPES:
        return moreShapes != null && !moreShapes.isEmpty();
      case OnlineElmPackage.MAIN_SHAPE__MORE_CONDITIONAL:
        return moreConditional != null && !moreConditional.isEmpty();
      case OnlineElmPackage.MAIN_SHAPE__MORE_SHAPE_REF:
        return moreShapeRef != null && !moreShapeRef.isEmpty();
      case OnlineElmPackage.MAIN_SHAPE__EXTERNAL:
        return external != null && !external.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //MainShapeImpl
