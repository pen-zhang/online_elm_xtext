/**
 * generated by Xtext 2.24.0
 */
package org.xtext.online_elm.onlineElm.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.online_elm.onlineElm.Color;
import org.xtext.online_elm.onlineElm.Conditional_Color;
import org.xtext.online_elm.onlineElm.LineType;
import org.xtext.online_elm.onlineElm.OnlineElmPackage;
import org.xtext.online_elm.onlineElm.Outlined;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Outlined</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.online_elm.onlineElm.impl.OutlinedImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.online_elm.onlineElm.impl.OutlinedImpl#getLineType <em>Line Type</em>}</li>
 *   <li>{@link org.xtext.online_elm.onlineElm.impl.OutlinedImpl#getWidth <em>Width</em>}</li>
 *   <li>{@link org.xtext.online_elm.onlineElm.impl.OutlinedImpl#getOutlinedColor1 <em>Outlined Color1</em>}</li>
 *   <li>{@link org.xtext.online_elm.onlineElm.impl.OutlinedImpl#getOutlinedColor2 <em>Outlined Color2</em>}</li>
 * </ul>
 *
 * @generated
 */
public class OutlinedImpl extends MinimalEObjectImpl.Container implements Outlined
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getLineType() <em>Line Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLineType()
   * @generated
   * @ordered
   */
  protected static final LineType LINE_TYPE_EDEFAULT = LineType.SOLID;

  /**
   * The cached value of the '{@link #getLineType() <em>Line Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLineType()
   * @generated
   * @ordered
   */
  protected LineType lineType = LINE_TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getWidth() <em>Width</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWidth()
   * @generated
   * @ordered
   */
  protected static final String WIDTH_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getWidth() <em>Width</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWidth()
   * @generated
   * @ordered
   */
  protected String width = WIDTH_EDEFAULT;

  /**
   * The default value of the '{@link #getOutlinedColor1() <em>Outlined Color1</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOutlinedColor1()
   * @generated
   * @ordered
   */
  protected static final Color OUTLINED_COLOR1_EDEFAULT = Color.BLACK;

  /**
   * The cached value of the '{@link #getOutlinedColor1() <em>Outlined Color1</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOutlinedColor1()
   * @generated
   * @ordered
   */
  protected Color outlinedColor1 = OUTLINED_COLOR1_EDEFAULT;

  /**
   * The cached value of the '{@link #getOutlinedColor2() <em>Outlined Color2</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOutlinedColor2()
   * @generated
   * @ordered
   */
  protected Conditional_Color outlinedColor2;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OutlinedImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OnlineElmPackage.Literals.OUTLINED;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OnlineElmPackage.OUTLINED__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LineType getLineType()
  {
    return lineType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLineType(LineType newLineType)
  {
    LineType oldLineType = lineType;
    lineType = newLineType == null ? LINE_TYPE_EDEFAULT : newLineType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OnlineElmPackage.OUTLINED__LINE_TYPE, oldLineType, lineType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getWidth()
  {
    return width;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWidth(String newWidth)
  {
    String oldWidth = width;
    width = newWidth;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OnlineElmPackage.OUTLINED__WIDTH, oldWidth, width));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Color getOutlinedColor1()
  {
    return outlinedColor1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOutlinedColor1(Color newOutlinedColor1)
  {
    Color oldOutlinedColor1 = outlinedColor1;
    outlinedColor1 = newOutlinedColor1 == null ? OUTLINED_COLOR1_EDEFAULT : newOutlinedColor1;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OnlineElmPackage.OUTLINED__OUTLINED_COLOR1, oldOutlinedColor1, outlinedColor1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Conditional_Color getOutlinedColor2()
  {
    return outlinedColor2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOutlinedColor2(Conditional_Color newOutlinedColor2, NotificationChain msgs)
  {
    Conditional_Color oldOutlinedColor2 = outlinedColor2;
    outlinedColor2 = newOutlinedColor2;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OnlineElmPackage.OUTLINED__OUTLINED_COLOR2, oldOutlinedColor2, newOutlinedColor2);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOutlinedColor2(Conditional_Color newOutlinedColor2)
  {
    if (newOutlinedColor2 != outlinedColor2)
    {
      NotificationChain msgs = null;
      if (outlinedColor2 != null)
        msgs = ((InternalEObject)outlinedColor2).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OnlineElmPackage.OUTLINED__OUTLINED_COLOR2, null, msgs);
      if (newOutlinedColor2 != null)
        msgs = ((InternalEObject)newOutlinedColor2).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OnlineElmPackage.OUTLINED__OUTLINED_COLOR2, null, msgs);
      msgs = basicSetOutlinedColor2(newOutlinedColor2, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OnlineElmPackage.OUTLINED__OUTLINED_COLOR2, newOutlinedColor2, newOutlinedColor2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OnlineElmPackage.OUTLINED__OUTLINED_COLOR2:
        return basicSetOutlinedColor2(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OnlineElmPackage.OUTLINED__NAME:
        return getName();
      case OnlineElmPackage.OUTLINED__LINE_TYPE:
        return getLineType();
      case OnlineElmPackage.OUTLINED__WIDTH:
        return getWidth();
      case OnlineElmPackage.OUTLINED__OUTLINED_COLOR1:
        return getOutlinedColor1();
      case OnlineElmPackage.OUTLINED__OUTLINED_COLOR2:
        return getOutlinedColor2();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OnlineElmPackage.OUTLINED__NAME:
        setName((String)newValue);
        return;
      case OnlineElmPackage.OUTLINED__LINE_TYPE:
        setLineType((LineType)newValue);
        return;
      case OnlineElmPackage.OUTLINED__WIDTH:
        setWidth((String)newValue);
        return;
      case OnlineElmPackage.OUTLINED__OUTLINED_COLOR1:
        setOutlinedColor1((Color)newValue);
        return;
      case OnlineElmPackage.OUTLINED__OUTLINED_COLOR2:
        setOutlinedColor2((Conditional_Color)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OnlineElmPackage.OUTLINED__NAME:
        setName(NAME_EDEFAULT);
        return;
      case OnlineElmPackage.OUTLINED__LINE_TYPE:
        setLineType(LINE_TYPE_EDEFAULT);
        return;
      case OnlineElmPackage.OUTLINED__WIDTH:
        setWidth(WIDTH_EDEFAULT);
        return;
      case OnlineElmPackage.OUTLINED__OUTLINED_COLOR1:
        setOutlinedColor1(OUTLINED_COLOR1_EDEFAULT);
        return;
      case OnlineElmPackage.OUTLINED__OUTLINED_COLOR2:
        setOutlinedColor2((Conditional_Color)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OnlineElmPackage.OUTLINED__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case OnlineElmPackage.OUTLINED__LINE_TYPE:
        return lineType != LINE_TYPE_EDEFAULT;
      case OnlineElmPackage.OUTLINED__WIDTH:
        return WIDTH_EDEFAULT == null ? width != null : !WIDTH_EDEFAULT.equals(width);
      case OnlineElmPackage.OUTLINED__OUTLINED_COLOR1:
        return outlinedColor1 != OUTLINED_COLOR1_EDEFAULT;
      case OnlineElmPackage.OUTLINED__OUTLINED_COLOR2:
        return outlinedColor2 != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", lineType: ");
    result.append(lineType);
    result.append(", width: ");
    result.append(width);
    result.append(", outlinedColor1: ");
    result.append(outlinedColor1);
    result.append(')');
    return result.toString();
  }

} //OutlinedImpl
