/**
 * generated by Xtext 2.24.0
 */
package org.xtext.online_elm.onlineElm.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.online_elm.onlineElm.MATH_OP;
import org.xtext.online_elm.onlineElm.Math_exp;
import org.xtext.online_elm.onlineElm.OnlineElmPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Math exp</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.online_elm.onlineElm.impl.Math_expImpl#getN1 <em>N1</em>}</li>
 *   <li>{@link org.xtext.online_elm.onlineElm.impl.Math_expImpl#getOp1 <em>Op1</em>}</li>
 *   <li>{@link org.xtext.online_elm.onlineElm.impl.Math_expImpl#getN2 <em>N2</em>}</li>
 * </ul>
 *
 * @generated
 */
public class Math_expImpl extends Num_valueImpl implements Math_exp
{
  /**
   * The default value of the '{@link #getN1() <em>N1</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getN1()
   * @generated
   * @ordered
   */
  protected static final float N1_EDEFAULT = 0.0F;

  /**
   * The cached value of the '{@link #getN1() <em>N1</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getN1()
   * @generated
   * @ordered
   */
  protected float n1 = N1_EDEFAULT;

  /**
   * The default value of the '{@link #getOp1() <em>Op1</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOp1()
   * @generated
   * @ordered
   */
  protected static final MATH_OP OP1_EDEFAULT = MATH_OP.PLUS;

  /**
   * The cached value of the '{@link #getOp1() <em>Op1</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOp1()
   * @generated
   * @ordered
   */
  protected MATH_OP op1 = OP1_EDEFAULT;

  /**
   * The default value of the '{@link #getN2() <em>N2</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getN2()
   * @generated
   * @ordered
   */
  protected static final float N2_EDEFAULT = 0.0F;

  /**
   * The cached value of the '{@link #getN2() <em>N2</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getN2()
   * @generated
   * @ordered
   */
  protected float n2 = N2_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Math_expImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OnlineElmPackage.Literals.MATH_EXP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public float getN1()
  {
    return n1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setN1(float newN1)
  {
    float oldN1 = n1;
    n1 = newN1;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OnlineElmPackage.MATH_EXP__N1, oldN1, n1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MATH_OP getOp1()
  {
    return op1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOp1(MATH_OP newOp1)
  {
    MATH_OP oldOp1 = op1;
    op1 = newOp1 == null ? OP1_EDEFAULT : newOp1;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OnlineElmPackage.MATH_EXP__OP1, oldOp1, op1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public float getN2()
  {
    return n2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setN2(float newN2)
  {
    float oldN2 = n2;
    n2 = newN2;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OnlineElmPackage.MATH_EXP__N2, oldN2, n2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OnlineElmPackage.MATH_EXP__N1:
        return getN1();
      case OnlineElmPackage.MATH_EXP__OP1:
        return getOp1();
      case OnlineElmPackage.MATH_EXP__N2:
        return getN2();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OnlineElmPackage.MATH_EXP__N1:
        setN1((Float)newValue);
        return;
      case OnlineElmPackage.MATH_EXP__OP1:
        setOp1((MATH_OP)newValue);
        return;
      case OnlineElmPackage.MATH_EXP__N2:
        setN2((Float)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OnlineElmPackage.MATH_EXP__N1:
        setN1(N1_EDEFAULT);
        return;
      case OnlineElmPackage.MATH_EXP__OP1:
        setOp1(OP1_EDEFAULT);
        return;
      case OnlineElmPackage.MATH_EXP__N2:
        setN2(N2_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OnlineElmPackage.MATH_EXP__N1:
        return n1 != N1_EDEFAULT;
      case OnlineElmPackage.MATH_EXP__OP1:
        return op1 != OP1_EDEFAULT;
      case OnlineElmPackage.MATH_EXP__N2:
        return n2 != N2_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (n1: ");
    result.append(n1);
    result.append(", op1: ");
    result.append(op1);
    result.append(", n2: ");
    result.append(n2);
    result.append(')');
    return result.toString();
  }

} //Math_expImpl
