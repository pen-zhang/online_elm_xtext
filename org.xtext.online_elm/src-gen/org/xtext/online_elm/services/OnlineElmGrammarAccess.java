/*
 * generated by Xtext 2.24.0
 */
package org.xtext.online_elm.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class OnlineElmGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class OnlineElmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.online_elm.OnlineElm.OnlineElm");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Assignment cEntryAssignment_0 = (Assignment)cUnorderedGroup.eContents().get(0);
		private final RuleCall cEntryMainShapeParserRuleCall_0_0 = (RuleCall)cEntryAssignment_0.eContents().get(0);
		private final Assignment cShapesAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cShapesShapeDefParserRuleCall_1_0 = (RuleCall)cShapesAssignment_1.eContents().get(0);
		
		//OnlineElm hidden(WS):
		//	entry=MainShape
		//	& shapes+=ShapeDef*;
		@Override public ParserRule getRule() { return rule; }
		
		//entry=MainShape
		//	& shapes+=ShapeDef*
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//entry=MainShape
		public Assignment getEntryAssignment_0() { return cEntryAssignment_0; }
		
		//MainShape
		public RuleCall getEntryMainShapeParserRuleCall_0_0() { return cEntryMainShapeParserRuleCall_0_0; }
		
		//shapes+=ShapeDef*
		public Assignment getShapesAssignment_1() { return cShapesAssignment_1; }
		
		//ShapeDef
		public RuleCall getShapesShapeDefParserRuleCall_1_0() { return cShapesShapeDefParserRuleCall_1_0; }
	}
	public class MainShapeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.online_elm.OnlineElm.MainShape");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameMyShapesKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cS1Assignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cS1ShapeParserRuleCall_3_0_0 = (RuleCall)cS1Assignment_3_0.eContents().get(0);
		private final Assignment cS11Assignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final CrossReference cS11BasicShapeCrossReference_3_1_0 = (CrossReference)cS11Assignment_3_1.eContents().get(0);
		private final RuleCall cS11BasicShapeIDTerminalRuleCall_3_1_0_1 = (RuleCall)cS11BasicShapeCrossReference_3_1_0.eContents().get(1);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cCommaKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cS2Assignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cS2ShapeParserRuleCall_4_0_1_0 = (RuleCall)cS2Assignment_4_0_1.eContents().get(0);
		private final Assignment cS22Assignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final CrossReference cS22BasicShapeCrossReference_4_1_0 = (CrossReference)cS22Assignment_4_1.eContents().get(0);
		private final RuleCall cS22BasicShapeIDTerminalRuleCall_4_1_0_1 = (RuleCall)cS22BasicShapeCrossReference_4_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cPlusSignPlusSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cSgAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cSgShapeGroupCrossReference_6_1_0 = (CrossReference)cSgAssignment_6_1.eContents().get(0);
		private final RuleCall cSgShapeGroupIDTerminalRuleCall_6_1_0_1 = (RuleCall)cSgShapeGroupCrossReference_6_1_0.eContents().get(1);
		
		//MainShape:
		//	name='myShapes' '='
		//	'[' (s1=Shape | s11=[BasicShape]) (',' s2+=Shape | s22+=[BasicShape])*
		//	']' ('++' sg+=[ShapeGroup])*;
		@Override public ParserRule getRule() { return rule; }
		
		//name='myShapes' '='
		//'[' (s1=Shape | s11=[BasicShape]) (',' s2+=Shape | s22+=[BasicShape])*
		//']' ('++' sg+=[ShapeGroup])*
		public Group getGroup() { return cGroup; }
		
		//name='myShapes'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'myShapes'
		public Keyword getNameMyShapesKeyword_0_0() { return cNameMyShapesKeyword_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//(s1=Shape | s11=[BasicShape])
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//s1=Shape
		public Assignment getS1Assignment_3_0() { return cS1Assignment_3_0; }
		
		//Shape
		public RuleCall getS1ShapeParserRuleCall_3_0_0() { return cS1ShapeParserRuleCall_3_0_0; }
		
		//s11=[BasicShape]
		public Assignment getS11Assignment_3_1() { return cS11Assignment_3_1; }
		
		//[BasicShape]
		public CrossReference getS11BasicShapeCrossReference_3_1_0() { return cS11BasicShapeCrossReference_3_1_0; }
		
		//ID
		public RuleCall getS11BasicShapeIDTerminalRuleCall_3_1_0_1() { return cS11BasicShapeIDTerminalRuleCall_3_1_0_1; }
		
		//(',' s2+=Shape | s22+=[BasicShape])*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//',' s2+=Shape
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//','
		public Keyword getCommaKeyword_4_0_0() { return cCommaKeyword_4_0_0; }
		
		//s2+=Shape
		public Assignment getS2Assignment_4_0_1() { return cS2Assignment_4_0_1; }
		
		//Shape
		public RuleCall getS2ShapeParserRuleCall_4_0_1_0() { return cS2ShapeParserRuleCall_4_0_1_0; }
		
		//s22+=[BasicShape]
		public Assignment getS22Assignment_4_1() { return cS22Assignment_4_1; }
		
		//[BasicShape]
		public CrossReference getS22BasicShapeCrossReference_4_1_0() { return cS22BasicShapeCrossReference_4_1_0; }
		
		//ID
		public RuleCall getS22BasicShapeIDTerminalRuleCall_4_1_0_1() { return cS22BasicShapeIDTerminalRuleCall_4_1_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
		
		//('++' sg+=[ShapeGroup])*
		public Group getGroup_6() { return cGroup_6; }
		
		//'++'
		public Keyword getPlusSignPlusSignKeyword_6_0() { return cPlusSignPlusSignKeyword_6_0; }
		
		//sg+=[ShapeGroup]
		public Assignment getSgAssignment_6_1() { return cSgAssignment_6_1; }
		
		//[ShapeGroup]
		public CrossReference getSgShapeGroupCrossReference_6_1_0() { return cSgShapeGroupCrossReference_6_1_0; }
		
		//ID
		public RuleCall getSgShapeGroupIDTerminalRuleCall_6_1_0_1() { return cSgShapeGroupIDTerminalRuleCall_6_1_0_1; }
	}
	public class ShapeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.online_elm.OnlineElm.ShapeDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cShapeGroupParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBasicShapeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ShapeDef:
		//	ShapeGroup | BasicShape;
		@Override public ParserRule getRule() { return rule; }
		
		//ShapeGroup | BasicShape
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ShapeGroup
		public RuleCall getShapeGroupParserRuleCall_0() { return cShapeGroupParserRuleCall_0; }
		
		//BasicShape
		public RuleCall getBasicShapeParserRuleCall_1() { return cBasicShapeParserRuleCall_1; }
	}
	public class ShapeGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.online_elm.OnlineElm.ShapeGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cS1Assignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cS1ShapeParserRuleCall_3_0_0 = (RuleCall)cS1Assignment_3_0.eContents().get(0);
		private final Assignment cS11Assignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final CrossReference cS11BasicShapeCrossReference_3_1_0 = (CrossReference)cS11Assignment_3_1.eContents().get(0);
		private final RuleCall cS11BasicShapeIDTerminalRuleCall_3_1_0_1 = (RuleCall)cS11BasicShapeCrossReference_3_1_0.eContents().get(1);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cCommaKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cS2Assignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cS2ShapeParserRuleCall_4_0_1_0 = (RuleCall)cS2Assignment_4_0_1.eContents().get(0);
		private final Assignment cS22Assignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final CrossReference cS22BasicShapeCrossReference_4_1_0 = (CrossReference)cS22Assignment_4_1.eContents().get(0);
		private final RuleCall cS22BasicShapeIDTerminalRuleCall_4_1_0_1 = (RuleCall)cS22BasicShapeCrossReference_4_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cPlusSignPlusSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cSgAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cSgShapeGroupCrossReference_6_1_0 = (CrossReference)cSgAssignment_6_1.eContents().get(0);
		private final RuleCall cSgShapeGroupIDTerminalRuleCall_6_1_0_1 = (RuleCall)cSgShapeGroupCrossReference_6_1_0.eContents().get(1);
		
		//ShapeGroup:
		//	name=ID '='
		//	'[' (s1=Shape | s11=[BasicShape]) (',' s2+=Shape | s22+=[BasicShape])*
		//	']' ('++' sg+=[ShapeGroup])*;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '='
		//'[' (s1=Shape | s11=[BasicShape]) (',' s2+=Shape | s22+=[BasicShape])*
		//']' ('++' sg+=[ShapeGroup])*
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//(s1=Shape | s11=[BasicShape])
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//s1=Shape
		public Assignment getS1Assignment_3_0() { return cS1Assignment_3_0; }
		
		//Shape
		public RuleCall getS1ShapeParserRuleCall_3_0_0() { return cS1ShapeParserRuleCall_3_0_0; }
		
		//s11=[BasicShape]
		public Assignment getS11Assignment_3_1() { return cS11Assignment_3_1; }
		
		//[BasicShape]
		public CrossReference getS11BasicShapeCrossReference_3_1_0() { return cS11BasicShapeCrossReference_3_1_0; }
		
		//ID
		public RuleCall getS11BasicShapeIDTerminalRuleCall_3_1_0_1() { return cS11BasicShapeIDTerminalRuleCall_3_1_0_1; }
		
		//(',' s2+=Shape | s22+=[BasicShape])*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//',' s2+=Shape
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//','
		public Keyword getCommaKeyword_4_0_0() { return cCommaKeyword_4_0_0; }
		
		//s2+=Shape
		public Assignment getS2Assignment_4_0_1() { return cS2Assignment_4_0_1; }
		
		//Shape
		public RuleCall getS2ShapeParserRuleCall_4_0_1_0() { return cS2ShapeParserRuleCall_4_0_1_0; }
		
		//s22+=[BasicShape]
		public Assignment getS22Assignment_4_1() { return cS22Assignment_4_1; }
		
		//[BasicShape]
		public CrossReference getS22BasicShapeCrossReference_4_1_0() { return cS22BasicShapeCrossReference_4_1_0; }
		
		//ID
		public RuleCall getS22BasicShapeIDTerminalRuleCall_4_1_0_1() { return cS22BasicShapeIDTerminalRuleCall_4_1_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
		
		//('++' sg+=[ShapeGroup])*
		public Group getGroup_6() { return cGroup_6; }
		
		//'++'
		public Keyword getPlusSignPlusSignKeyword_6_0() { return cPlusSignPlusSignKeyword_6_0; }
		
		//sg+=[ShapeGroup]
		public Assignment getSgAssignment_6_1() { return cSgAssignment_6_1; }
		
		//[ShapeGroup]
		public CrossReference getSgShapeGroupCrossReference_6_1_0() { return cSgShapeGroupCrossReference_6_1_0; }
		
		//ID
		public RuleCall getSgShapeGroupIDTerminalRuleCall_6_1_0_1() { return cSgShapeGroupIDTerminalRuleCall_6_1_0_1; }
	}
	public class BasicShapeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.online_elm.OnlineElm.BasicShape");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cShapeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cShapeShapeParserRuleCall_2_0 = (RuleCall)cShapeAssignment_2.eContents().get(0);
		
		//BasicShape:
		//	name=ID '=' shape=Shape;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '=' shape=Shape
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//shape=Shape
		public Assignment getShapeAssignment_2() { return cShapeAssignment_2; }
		
		//Shape
		public RuleCall getShapeShapeParserRuleCall_2_0() { return cShapeShapeParserRuleCall_2_0; }
	}
	public class ShapeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.online_elm.OnlineElm.Shape");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cStencilAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cStencilStencilParserRuleCall_0_0_0 = (RuleCall)cStencilAssignment_0_0.eContents().get(0);
		private final Keyword cVerticalLineGreaterThanSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cDrawAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cDrawDrawParserRuleCall_0_2_0 = (RuleCall)cDrawAssignment_0_2.eContents().get(0);
		private final RuleCall cConditionalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Shape:
		//	stencil=Stencil
		//	'|>' draw=Draw | Conditional;
		@Override public ParserRule getRule() { return rule; }
		
		//stencil=Stencil
		//'|>' draw=Draw | Conditional
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//stencil=Stencil
		//'|>' draw=Draw
		public Group getGroup_0() { return cGroup_0; }
		
		//stencil=Stencil
		public Assignment getStencilAssignment_0_0() { return cStencilAssignment_0_0; }
		
		//Stencil
		public RuleCall getStencilStencilParserRuleCall_0_0_0() { return cStencilStencilParserRuleCall_0_0_0; }
		
		//'|>'
		public Keyword getVerticalLineGreaterThanSignKeyword_0_1() { return cVerticalLineGreaterThanSignKeyword_0_1; }
		
		//draw=Draw
		public Assignment getDrawAssignment_0_2() { return cDrawAssignment_0_2; }
		
		//Draw
		public RuleCall getDrawDrawParserRuleCall_0_2_0() { return cDrawDrawParserRuleCall_0_2_0; }
		
		//Conditional
		public RuleCall getConditionalParserRuleCall_1() { return cConditionalParserRuleCall_1; }
	}
	public class ConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.online_elm.OnlineElm.Conditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cBool_expParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExp1Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExp1ShapeParserRuleCall_3_0 = (RuleCall)cExp1Assignment_3.eContents().get(0);
		private final Keyword cElseKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExp2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExp2ShapeParserRuleCall_5_0 = (RuleCall)cExp2Assignment_5.eContents().get(0);
		
		//Conditional:
		//	"if" Bool_exp "then"
		//	exp1=Shape
		//	"else"
		//	exp2=Shape;
		@Override public ParserRule getRule() { return rule; }
		
		//"if" Bool_exp "then"
		//exp1=Shape
		//"else"
		//exp2=Shape
		public Group getGroup() { return cGroup; }
		
		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//Bool_exp
		public RuleCall getBool_expParserRuleCall_1() { return cBool_expParserRuleCall_1; }
		
		//"then"
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//exp1=Shape
		public Assignment getExp1Assignment_3() { return cExp1Assignment_3; }
		
		//Shape
		public RuleCall getExp1ShapeParserRuleCall_3_0() { return cExp1ShapeParserRuleCall_3_0; }
		
		//"else"
		public Keyword getElseKeyword_4() { return cElseKeyword_4; }
		
		//exp2=Shape
		public Assignment getExp2Assignment_5() { return cExp2Assignment_5; }
		
		//Shape
		public RuleCall getExp2ShapeParserRuleCall_5_0() { return cExp2ShapeParserRuleCall_5_0; }
	}
	public class Bool_expElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.online_elm.OnlineElm.Bool_exp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftTerminal_Bool_expParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cOperatorAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cOperatorBOOL_OPEnumRuleCall_2_0_0 = (RuleCall)cOperatorAssignment_2_0.eContents().get(0);
		private final Assignment cRightsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRightsTerminal_Bool_expParserRuleCall_2_1_0 = (RuleCall)cRightsAssignment_2_1.eContents().get(0);
		
		///*
		// * Value:
		// * 	basic_shape=[BasicShape] | Num
		// * ;
		// */
		//Bool_exp:
		//	'not'? left=Terminal_Bool_exp (operator+=BOOL_OP rights+=Terminal_Bool_exp)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'not'? left=Terminal_Bool_exp (operator+=BOOL_OP rights+=Terminal_Bool_exp)*
		public Group getGroup() { return cGroup; }
		
		//'not'?
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }
		
		//left=Terminal_Bool_exp
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Terminal_Bool_exp
		public RuleCall getLeftTerminal_Bool_expParserRuleCall_1_0() { return cLeftTerminal_Bool_expParserRuleCall_1_0; }
		
		//(operator+=BOOL_OP rights+=Terminal_Bool_exp)*
		public Group getGroup_2() { return cGroup_2; }
		
		//operator+=BOOL_OP
		public Assignment getOperatorAssignment_2_0() { return cOperatorAssignment_2_0; }
		
		//BOOL_OP
		public RuleCall getOperatorBOOL_OPEnumRuleCall_2_0_0() { return cOperatorBOOL_OPEnumRuleCall_2_0_0; }
		
		//rights+=Terminal_Bool_exp
		public Assignment getRightsAssignment_2_1() { return cRightsAssignment_2_1; }
		
		//Terminal_Bool_exp
		public RuleCall getRightsTerminal_Bool_expParserRuleCall_2_1_0() { return cRightsTerminal_Bool_expParserRuleCall_2_1_0; }
	}
	public class Terminal_Bool_expElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.online_elm.OnlineElm.Terminal_Bool_exp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cN1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cN1Num_valueParserRuleCall_0_0 = (RuleCall)cN1Assignment_0.eContents().get(0);
		private final Assignment cCompAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCompCOMPARISONEnumRuleCall_1_0 = (RuleCall)cCompAssignment_1.eContents().get(0);
		private final Assignment cN2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cN2Num_valueParserRuleCall_2_0 = (RuleCall)cN2Assignment_2.eContents().get(0);
		
		//Terminal_Bool_exp:
		//	n1=Num_value comp=COMPARISON n2=Num_value;
		@Override public ParserRule getRule() { return rule; }
		
		//n1=Num_value comp=COMPARISON n2=Num_value
		public Group getGroup() { return cGroup; }
		
		//n1=Num_value
		public Assignment getN1Assignment_0() { return cN1Assignment_0; }
		
		//Num_value
		public RuleCall getN1Num_valueParserRuleCall_0_0() { return cN1Num_valueParserRuleCall_0_0; }
		
		//comp=COMPARISON
		public Assignment getCompAssignment_1() { return cCompAssignment_1; }
		
		//COMPARISON
		public RuleCall getCompCOMPARISONEnumRuleCall_1_0() { return cCompCOMPARISONEnumRuleCall_1_0; }
		
		//n2=Num_value
		public Assignment getN2Assignment_2() { return cN2Assignment_2; }
		
		//Num_value
		public RuleCall getN2Num_valueParserRuleCall_2_0() { return cN2Num_valueParserRuleCall_2_0; }
	}
	public class Num_valueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.online_elm.OnlineElm.Num_value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNumAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNumFLOATTerminalRuleCall_0_0 = (RuleCall)cNumAssignment_0.eContents().get(0);
		private final RuleCall cMath_expParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Num_value:
		//	num=FLOAT | Math_exp;
		@Override public ParserRule getRule() { return rule; }
		
		//num=FLOAT | Math_exp
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//num=FLOAT
		public Assignment getNumAssignment_0() { return cNumAssignment_0; }
		
		//FLOAT
		public RuleCall getNumFLOATTerminalRuleCall_0_0() { return cNumFLOATTerminalRuleCall_0_0; }
		
		//Math_exp
		public RuleCall getMath_expParserRuleCall_1() { return cMath_expParserRuleCall_1; }
	}
	public class Math_expElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.online_elm.OnlineElm.Math_exp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cN1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cN1FLOATTerminalRuleCall_1_0 = (RuleCall)cN1Assignment_1.eContents().get(0);
		private final Assignment cOp1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOp1MATH_OPEnumRuleCall_2_0 = (RuleCall)cOp1Assignment_2.eContents().get(0);
		private final Assignment cN2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cN2FLOATTerminalRuleCall_3_0 = (RuleCall)cN2Assignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Math_exp:
		//	'(' n1=FLOAT op1=MATH_OP n2=FLOAT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' n1=FLOAT op1=MATH_OP n2=FLOAT ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//n1=FLOAT
		public Assignment getN1Assignment_1() { return cN1Assignment_1; }
		
		//FLOAT
		public RuleCall getN1FLOATTerminalRuleCall_1_0() { return cN1FLOATTerminalRuleCall_1_0; }
		
		//op1=MATH_OP
		public Assignment getOp1Assignment_2() { return cOp1Assignment_2; }
		
		//MATH_OP
		public RuleCall getOp1MATH_OPEnumRuleCall_2_0() { return cOp1MATH_OPEnumRuleCall_2_0; }
		
		//n2=FLOAT
		public Assignment getN2Assignment_3() { return cN2Assignment_3; }
		
		//FLOAT
		public RuleCall getN2FLOATTerminalRuleCall_3_0() { return cN2FLOATTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class StencilElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.online_elm.OnlineElm.Stencil");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCircleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTextParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Stencil:
		//	Circle | Rect | Text;
		@Override public ParserRule getRule() { return rule; }
		
		//Circle | Rect | Text
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Circle
		public RuleCall getCircleParserRuleCall_0() { return cCircleParserRuleCall_0; }
		
		//Rect
		public RuleCall getRectParserRuleCall_1() { return cRectParserRuleCall_1; }
		
		//Text
		public RuleCall getTextParserRuleCall_2() { return cTextParserRuleCall_2; }
	}
	public class CircleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.online_elm.OnlineElm.Circle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameCircleKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cDiameterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDiameterFLOATTerminalRuleCall_1_0 = (RuleCall)cDiameterAssignment_1.eContents().get(0);
		
		//Circle:
		//	name='circle' diameter=FLOAT;
		@Override public ParserRule getRule() { return rule; }
		
		//name='circle' diameter=FLOAT
		public Group getGroup() { return cGroup; }
		
		//name='circle'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'circle'
		public Keyword getNameCircleKeyword_0_0() { return cNameCircleKeyword_0_0; }
		
		//diameter=FLOAT
		public Assignment getDiameterAssignment_1() { return cDiameterAssignment_1; }
		
		//FLOAT
		public RuleCall getDiameterFLOATTerminalRuleCall_1_0() { return cDiameterFLOATTerminalRuleCall_1_0; }
	}
	public class RectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.online_elm.OnlineElm.Rect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameRectKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cEdgeXAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEdgeXFLOATTerminalRuleCall_1_0 = (RuleCall)cEdgeXAssignment_1.eContents().get(0);
		private final Assignment cEdgeYAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEdgeYFLOATTerminalRuleCall_2_0 = (RuleCall)cEdgeYAssignment_2.eContents().get(0);
		
		//Rect:
		//	name='rect' edgeX=FLOAT edgeY=FLOAT;
		@Override public ParserRule getRule() { return rule; }
		
		//name='rect' edgeX=FLOAT edgeY=FLOAT
		public Group getGroup() { return cGroup; }
		
		//name='rect'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'rect'
		public Keyword getNameRectKeyword_0_0() { return cNameRectKeyword_0_0; }
		
		//edgeX=FLOAT
		public Assignment getEdgeXAssignment_1() { return cEdgeXAssignment_1; }
		
		//FLOAT
		public RuleCall getEdgeXFLOATTerminalRuleCall_1_0() { return cEdgeXFLOATTerminalRuleCall_1_0; }
		
		//edgeY=FLOAT
		public Assignment getEdgeYAssignment_2() { return cEdgeYAssignment_2; }
		
		//FLOAT
		public RuleCall getEdgeYFLOATTerminalRuleCall_2_0() { return cEdgeYFLOATTerminalRuleCall_2_0; }
	}
	public class TextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.online_elm.OnlineElm.Text");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameTextKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cContentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContentSTRINGTerminalRuleCall_1_0 = (RuleCall)cContentAssignment_1.eContents().get(0);
		
		//Text:
		//	name='text' content=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name='text' content=STRING
		public Group getGroup() { return cGroup; }
		
		//name='text'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'text'
		public Keyword getNameTextKeyword_0_0() { return cNameTextKeyword_0_0; }
		
		//content=STRING
		public Assignment getContentAssignment_1() { return cContentAssignment_1; }
		
		//STRING
		public RuleCall getContentSTRINGTerminalRuleCall_1_0() { return cContentSTRINGTerminalRuleCall_1_0; }
	}
	public class DrawElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.online_elm.OnlineElm.Draw");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFilledColorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFilledColorFillParserRuleCall_0_0 = (RuleCall)cFilledColorAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPositionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPositionMoveParserRuleCall_1_1_0 = (RuleCall)cPositionAssignment_1_1.eContents().get(0);
		
		//Draw:
		//	filledColor=Fill ('|>' position=Move)?;
		@Override public ParserRule getRule() { return rule; }
		
		//filledColor=Fill ('|>' position=Move)?
		public Group getGroup() { return cGroup; }
		
		//filledColor=Fill
		public Assignment getFilledColorAssignment_0() { return cFilledColorAssignment_0; }
		
		//Fill
		public RuleCall getFilledColorFillParserRuleCall_0_0() { return cFilledColorFillParserRuleCall_0_0; }
		
		//('|>' position=Move)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'|>'
		public Keyword getVerticalLineGreaterThanSignKeyword_1_0() { return cVerticalLineGreaterThanSignKeyword_1_0; }
		
		//position=Move
		public Assignment getPositionAssignment_1_1() { return cPositionAssignment_1_1; }
		
		//Move
		public RuleCall getPositionMoveParserRuleCall_1_1_0() { return cPositionMoveParserRuleCall_1_1_0; }
	}
	public class FillElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.online_elm.OnlineElm.Fill");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameFilledKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cColorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColorColorEnumRuleCall_1_0 = (RuleCall)cColorAssignment_1.eContents().get(0);
		
		//Fill:
		//	name='filled' color=Color;
		@Override public ParserRule getRule() { return rule; }
		
		//name='filled' color=Color
		public Group getGroup() { return cGroup; }
		
		//name='filled'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'filled'
		public Keyword getNameFilledKeyword_0_0() { return cNameFilledKeyword_0_0; }
		
		//color=Color
		public Assignment getColorAssignment_1() { return cColorAssignment_1; }
		
		//Color
		public RuleCall getColorColorEnumRuleCall_1_0() { return cColorColorEnumRuleCall_1_0; }
	}
	public class MoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.online_elm.OnlineElm.Move");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameMoveKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cXAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cXNum_valueParserRuleCall_2_0 = (RuleCall)cXAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cYAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cYNum_valueParserRuleCall_4_0 = (RuleCall)cYAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Move:
		//	name='move' '(' x=Num_value ',' y=Num_value ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name='move' '(' x=Num_value ',' y=Num_value ')'
		public Group getGroup() { return cGroup; }
		
		//name='move'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'move'
		public Keyword getNameMoveKeyword_0_0() { return cNameMoveKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//x=Num_value
		public Assignment getXAssignment_2() { return cXAssignment_2; }
		
		//Num_value
		public RuleCall getXNum_valueParserRuleCall_2_0() { return cXNum_valueParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//y=Num_value
		public Assignment getYAssignment_4() { return cYAssignment_4; }
		
		//Num_value
		public RuleCall getYNum_valueParserRuleCall_4_0() { return cYNum_valueParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	
	public class BOOL_OPElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.online_elm.OnlineElm.BOOL_OP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAndEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAndAmpersandAmpersandKeyword_0_0 = (Keyword)cAndEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOrEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOrVerticalLineVerticalLineKeyword_1_0 = (Keyword)cOrEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BOOL_OP:
		//	and='&&' | or='||';
		public EnumRule getRule() { return rule; }
		
		//and='&&' | or='||'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//and='&&'
		public EnumLiteralDeclaration getAndEnumLiteralDeclaration_0() { return cAndEnumLiteralDeclaration_0; }
		
		//'&&'
		public Keyword getAndAmpersandAmpersandKeyword_0_0() { return cAndAmpersandAmpersandKeyword_0_0; }
		
		//or='||'
		public EnumLiteralDeclaration getOrEnumLiteralDeclaration_1() { return cOrEnumLiteralDeclaration_1; }
		
		//'||'
		public Keyword getOrVerticalLineVerticalLineKeyword_1_0() { return cOrVerticalLineVerticalLineKeyword_1_0; }
	}
	public class MATH_OPElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.online_elm.OnlineElm.MATH_OP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPlusEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPlusPlusSignKeyword_0_0 = (Keyword)cPlusEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMinusEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMinusHyphenMinusKeyword_1_0 = (Keyword)cMinusEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTimesEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTimesAsteriskKeyword_2_0 = (Keyword)cTimesEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDivideEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDivideSolidusKeyword_3_0 = (Keyword)cDivideEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum MATH_OP:
		//	plus='+' | minus='-' | times='*' | divide='/';
		public EnumRule getRule() { return rule; }
		
		//plus='+' | minus='-' | times='*' | divide='/'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//plus='+'
		public EnumLiteralDeclaration getPlusEnumLiteralDeclaration_0() { return cPlusEnumLiteralDeclaration_0; }
		
		//'+'
		public Keyword getPlusPlusSignKeyword_0_0() { return cPlusPlusSignKeyword_0_0; }
		
		//minus='-'
		public EnumLiteralDeclaration getMinusEnumLiteralDeclaration_1() { return cMinusEnumLiteralDeclaration_1; }
		
		//'-'
		public Keyword getMinusHyphenMinusKeyword_1_0() { return cMinusHyphenMinusKeyword_1_0; }
		
		//times='*'
		public EnumLiteralDeclaration getTimesEnumLiteralDeclaration_2() { return cTimesEnumLiteralDeclaration_2; }
		
		//'*'
		public Keyword getTimesAsteriskKeyword_2_0() { return cTimesAsteriskKeyword_2_0; }
		
		//divide='/'
		public EnumLiteralDeclaration getDivideEnumLiteralDeclaration_3() { return cDivideEnumLiteralDeclaration_3; }
		
		//'/'
		public Keyword getDivideSolidusKeyword_3_0() { return cDivideSolidusKeyword_3_0; }
	}
	public class COMPARISONElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.online_elm.OnlineElm.COMPARISON");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBiggerEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBiggerGreaterThanSignKeyword_0_0 = (Keyword)cBiggerEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNoLessThanEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNoLessThanGreaterThanSignEqualsSignKeyword_1_0 = (Keyword)cNoLessThanEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSmallerEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSmallerLessThanSignKeyword_2_0 = (Keyword)cSmallerEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNoBiggerThanEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNoBiggerThanLessThanSignEqualsSignKeyword_3_0 = (Keyword)cNoBiggerThanEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cEqualEqualsSignEqualsSignKeyword_4_0 = (Keyword)cEqualEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum COMPARISON:
		//	bigger='>' | noLessThan='>=' | smaller='<' | noBiggerThan='<=' | equal='==';
		public EnumRule getRule() { return rule; }
		
		//bigger='>' | noLessThan='>=' | smaller='<' | noBiggerThan='<=' | equal='=='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//bigger='>'
		public EnumLiteralDeclaration getBiggerEnumLiteralDeclaration_0() { return cBiggerEnumLiteralDeclaration_0; }
		
		//'>'
		public Keyword getBiggerGreaterThanSignKeyword_0_0() { return cBiggerGreaterThanSignKeyword_0_0; }
		
		//noLessThan='>='
		public EnumLiteralDeclaration getNoLessThanEnumLiteralDeclaration_1() { return cNoLessThanEnumLiteralDeclaration_1; }
		
		//'>='
		public Keyword getNoLessThanGreaterThanSignEqualsSignKeyword_1_0() { return cNoLessThanGreaterThanSignEqualsSignKeyword_1_0; }
		
		//smaller='<'
		public EnumLiteralDeclaration getSmallerEnumLiteralDeclaration_2() { return cSmallerEnumLiteralDeclaration_2; }
		
		//'<'
		public Keyword getSmallerLessThanSignKeyword_2_0() { return cSmallerLessThanSignKeyword_2_0; }
		
		//noBiggerThan='<='
		public EnumLiteralDeclaration getNoBiggerThanEnumLiteralDeclaration_3() { return cNoBiggerThanEnumLiteralDeclaration_3; }
		
		//'<='
		public Keyword getNoBiggerThanLessThanSignEqualsSignKeyword_3_0() { return cNoBiggerThanLessThanSignEqualsSignKeyword_3_0; }
		
		//equal='=='
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_4() { return cEqualEnumLiteralDeclaration_4; }
		
		//'=='
		public Keyword getEqualEqualsSignEqualsSignKeyword_4_0() { return cEqualEqualsSignEqualsSignKeyword_4_0; }
	}
	public class ColorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.online_elm.OnlineElm.Color");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBLACKEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBLACKBlackKeyword_0_0 = (Keyword)cBLACKEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cREDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cREDRedKeyword_1_0 = (Keyword)cREDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBLUEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBLUEBlueKeyword_2_0 = (Keyword)cBLUEEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Color:
		//	BLACK='black' | RED='red' | BLUE='blue';
		public EnumRule getRule() { return rule; }
		
		//BLACK='black' | RED='red' | BLUE='blue'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BLACK='black'
		public EnumLiteralDeclaration getBLACKEnumLiteralDeclaration_0() { return cBLACKEnumLiteralDeclaration_0; }
		
		//'black'
		public Keyword getBLACKBlackKeyword_0_0() { return cBLACKBlackKeyword_0_0; }
		
		//RED='red'
		public EnumLiteralDeclaration getREDEnumLiteralDeclaration_1() { return cREDEnumLiteralDeclaration_1; }
		
		//'red'
		public Keyword getREDRedKeyword_1_0() { return cREDRedKeyword_1_0; }
		
		//BLUE='blue'
		public EnumLiteralDeclaration getBLUEEnumLiteralDeclaration_2() { return cBLUEEnumLiteralDeclaration_2; }
		
		//'blue'
		public Keyword getBLUEBlueKeyword_2_0() { return cBLUEBlueKeyword_2_0; }
	}
	
	private final OnlineElmElements pOnlineElm;
	private final MainShapeElements pMainShape;
	private final ShapeDefElements pShapeDef;
	private final ShapeGroupElements pShapeGroup;
	private final BasicShapeElements pBasicShape;
	private final ShapeElements pShape;
	private final ConditionalElements pConditional;
	private final Bool_expElements pBool_exp;
	private final BOOL_OPElements eBOOL_OP;
	private final Terminal_Bool_expElements pTerminal_Bool_exp;
	private final Num_valueElements pNum_value;
	private final Math_expElements pMath_exp;
	private final MATH_OPElements eMATH_OP;
	private final COMPARISONElements eCOMPARISON;
	private final StencilElements pStencil;
	private final CircleElements pCircle;
	private final RectElements pRect;
	private final TextElements pText;
	private final TerminalRule tFLOAT;
	private final DrawElements pDraw;
	private final FillElements pFill;
	private final MoveElements pMove;
	private final ColorElements eColor;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public OnlineElmGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pOnlineElm = new OnlineElmElements();
		this.pMainShape = new MainShapeElements();
		this.pShapeDef = new ShapeDefElements();
		this.pShapeGroup = new ShapeGroupElements();
		this.pBasicShape = new BasicShapeElements();
		this.pShape = new ShapeElements();
		this.pConditional = new ConditionalElements();
		this.pBool_exp = new Bool_expElements();
		this.eBOOL_OP = new BOOL_OPElements();
		this.pTerminal_Bool_exp = new Terminal_Bool_expElements();
		this.pNum_value = new Num_valueElements();
		this.pMath_exp = new Math_expElements();
		this.eMATH_OP = new MATH_OPElements();
		this.eCOMPARISON = new COMPARISONElements();
		this.pStencil = new StencilElements();
		this.pCircle = new CircleElements();
		this.pRect = new RectElements();
		this.pText = new TextElements();
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.online_elm.OnlineElm.FLOAT");
		this.pDraw = new DrawElements();
		this.pFill = new FillElements();
		this.pMove = new MoveElements();
		this.eColor = new ColorElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.online_elm.OnlineElm".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//OnlineElm hidden(WS):
	//	entry=MainShape
	//	& shapes+=ShapeDef*;
	public OnlineElmElements getOnlineElmAccess() {
		return pOnlineElm;
	}
	
	public ParserRule getOnlineElmRule() {
		return getOnlineElmAccess().getRule();
	}
	
	//MainShape:
	//	name='myShapes' '='
	//	'[' (s1=Shape | s11=[BasicShape]) (',' s2+=Shape | s22+=[BasicShape])*
	//	']' ('++' sg+=[ShapeGroup])*;
	public MainShapeElements getMainShapeAccess() {
		return pMainShape;
	}
	
	public ParserRule getMainShapeRule() {
		return getMainShapeAccess().getRule();
	}
	
	//ShapeDef:
	//	ShapeGroup | BasicShape;
	public ShapeDefElements getShapeDefAccess() {
		return pShapeDef;
	}
	
	public ParserRule getShapeDefRule() {
		return getShapeDefAccess().getRule();
	}
	
	//ShapeGroup:
	//	name=ID '='
	//	'[' (s1=Shape | s11=[BasicShape]) (',' s2+=Shape | s22+=[BasicShape])*
	//	']' ('++' sg+=[ShapeGroup])*;
	public ShapeGroupElements getShapeGroupAccess() {
		return pShapeGroup;
	}
	
	public ParserRule getShapeGroupRule() {
		return getShapeGroupAccess().getRule();
	}
	
	//BasicShape:
	//	name=ID '=' shape=Shape;
	public BasicShapeElements getBasicShapeAccess() {
		return pBasicShape;
	}
	
	public ParserRule getBasicShapeRule() {
		return getBasicShapeAccess().getRule();
	}
	
	//Shape:
	//	stencil=Stencil
	//	'|>' draw=Draw | Conditional;
	public ShapeElements getShapeAccess() {
		return pShape;
	}
	
	public ParserRule getShapeRule() {
		return getShapeAccess().getRule();
	}
	
	//Conditional:
	//	"if" Bool_exp "then"
	//	exp1=Shape
	//	"else"
	//	exp2=Shape;
	public ConditionalElements getConditionalAccess() {
		return pConditional;
	}
	
	public ParserRule getConditionalRule() {
		return getConditionalAccess().getRule();
	}
	
	///*
	// * Value:
	// * 	basic_shape=[BasicShape] | Num
	// * ;
	// */
	//Bool_exp:
	//	'not'? left=Terminal_Bool_exp (operator+=BOOL_OP rights+=Terminal_Bool_exp)*;
	public Bool_expElements getBool_expAccess() {
		return pBool_exp;
	}
	
	public ParserRule getBool_expRule() {
		return getBool_expAccess().getRule();
	}
	
	//enum BOOL_OP:
	//	and='&&' | or='||';
	public BOOL_OPElements getBOOL_OPAccess() {
		return eBOOL_OP;
	}
	
	public EnumRule getBOOL_OPRule() {
		return getBOOL_OPAccess().getRule();
	}
	
	//Terminal_Bool_exp:
	//	n1=Num_value comp=COMPARISON n2=Num_value;
	public Terminal_Bool_expElements getTerminal_Bool_expAccess() {
		return pTerminal_Bool_exp;
	}
	
	public ParserRule getTerminal_Bool_expRule() {
		return getTerminal_Bool_expAccess().getRule();
	}
	
	//Num_value:
	//	num=FLOAT | Math_exp;
	public Num_valueElements getNum_valueAccess() {
		return pNum_value;
	}
	
	public ParserRule getNum_valueRule() {
		return getNum_valueAccess().getRule();
	}
	
	//Math_exp:
	//	'(' n1=FLOAT op1=MATH_OP n2=FLOAT ')';
	public Math_expElements getMath_expAccess() {
		return pMath_exp;
	}
	
	public ParserRule getMath_expRule() {
		return getMath_expAccess().getRule();
	}
	
	//enum MATH_OP:
	//	plus='+' | minus='-' | times='*' | divide='/';
	public MATH_OPElements getMATH_OPAccess() {
		return eMATH_OP;
	}
	
	public EnumRule getMATH_OPRule() {
		return getMATH_OPAccess().getRule();
	}
	
	//enum COMPARISON:
	//	bigger='>' | noLessThan='>=' | smaller='<' | noBiggerThan='<=' | equal='==';
	public COMPARISONElements getCOMPARISONAccess() {
		return eCOMPARISON;
	}
	
	public EnumRule getCOMPARISONRule() {
		return getCOMPARISONAccess().getRule();
	}
	
	//Stencil:
	//	Circle | Rect | Text;
	public StencilElements getStencilAccess() {
		return pStencil;
	}
	
	public ParserRule getStencilRule() {
		return getStencilAccess().getRule();
	}
	
	//Circle:
	//	name='circle' diameter=FLOAT;
	public CircleElements getCircleAccess() {
		return pCircle;
	}
	
	public ParserRule getCircleRule() {
		return getCircleAccess().getRule();
	}
	
	//Rect:
	//	name='rect' edgeX=FLOAT edgeY=FLOAT;
	public RectElements getRectAccess() {
		return pRect;
	}
	
	public ParserRule getRectRule() {
		return getRectAccess().getRule();
	}
	
	//Text:
	//	name='text' content=STRING;
	public TextElements getTextAccess() {
		return pText;
	}
	
	public ParserRule getTextRule() {
		return getTextAccess().getRule();
	}
	
	//terminal FLOAT returns ecore::EFloat:
	////	'-'?('0'..'9')+('.'('0'..'9')+)?
	//	'-'? INT ('.'INT)?;
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	}
	
	//Draw:
	//	filledColor=Fill ('|>' position=Move)?;
	public DrawElements getDrawAccess() {
		return pDraw;
	}
	
	public ParserRule getDrawRule() {
		return getDrawAccess().getRule();
	}
	
	//Fill:
	//	name='filled' color=Color;
	public FillElements getFillAccess() {
		return pFill;
	}
	
	public ParserRule getFillRule() {
		return getFillAccess().getRule();
	}
	
	//Move:
	//	name='move' '(' x=Num_value ',' y=Num_value ')';
	public MoveElements getMoveAccess() {
		return pMove;
	}
	
	public ParserRule getMoveRule() {
		return getMoveAccess().getRule();
	}
	
	//enum Color:
	//	BLACK='black' | RED='red' | BLUE='blue';
	public ColorElements getColorAccess() {
		return eColor;
	}
	
	public EnumRule getColorRule() {
		return getColorAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
