/*
 * generated by Xtext 2.24.0
 */
grammar InternalOnlineElm;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.online_elm.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.online_elm.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.online_elm.services.OnlineElmGrammarAccess;

}

@parser::members {

 	private OnlineElmGrammarAccess grammarAccess;

    public InternalOnlineElmParser(TokenStream input, OnlineElmGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "OnlineElm";
   	}

   	@Override
   	protected OnlineElmGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleOnlineElm
entryRuleOnlineElm returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getOnlineElmRule()); }
	iv_ruleOnlineElm=ruleOnlineElm
	{ $current=$iv_ruleOnlineElm.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule OnlineElm
ruleOnlineElm returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		(
			{ 
			  getUnorderedGroupHelper().enter(grammarAccess.getOnlineElmAccess().getUnorderedGroup());
			}
			(
				(
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getOnlineElmAccess().getUnorderedGroup(), 0)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getOnlineElmAccess().getUnorderedGroup(), 0);
				}
							({true}?=>((
								{
									newCompositeNode(grammarAccess.getOnlineElmAccess().getEntryMainShapeParserRuleCall_0_0());
								}
								lv_entry_1_0=ruleMainShape
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getOnlineElmRule());
									}
									set(
										$current,
										"entry",
										lv_entry_1_0,
										"org.xtext.online_elm.OnlineElm.MainShape");
									afterParserOrEnumRuleCall();
								}
							)
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOnlineElmAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getOnlineElmAccess().getUnorderedGroup(), 1)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getOnlineElmAccess().getUnorderedGroup(), 1);
				}
							({true}?=>((
								{
									newCompositeNode(grammarAccess.getOnlineElmAccess().getShapesShapeDefParserRuleCall_1_0());
								}
								lv_shapes_2_0=ruleShapeDef
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getOnlineElmRule());
									}
									add(
										$current,
										"shapes",
										lv_shapes_2_0,
										"org.xtext.online_elm.OnlineElm.ShapeDef");
									afterParserOrEnumRuleCall();
								}
							)
							))+
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOnlineElmAccess().getUnorderedGroup());
				}
			)
		)
				)+
				{getUnorderedGroupHelper().canLeave(grammarAccess.getOnlineElmAccess().getUnorderedGroup())}?
			)
		)
			{ 
			  getUnorderedGroupHelper().leave(grammarAccess.getOnlineElmAccess().getUnorderedGroup());
			}
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleMainShape
entryRuleMainShape returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMainShapeRule()); }
	iv_ruleMainShape=ruleMainShape
	{ $current=$iv_ruleMainShape.current; }
	EOF;

// Rule MainShape
ruleMainShape returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='myShapes'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getMainShapeAccess().getNameMyShapesKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMainShapeRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "myShapes");
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getMainShapeAccess().getEqualsSignKeyword_1());
		}
		otherlv_2='['
		{
			newLeafNode(otherlv_2, grammarAccess.getMainShapeAccess().getLeftSquareBracketKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMainShapeAccess().getS1ShapeParserRuleCall_3_0_0());
					}
					lv_s1_3_0=ruleShape
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMainShapeRule());
						}
						set(
							$current,
							"s1",
							lv_s1_3_0,
							"org.xtext.online_elm.OnlineElm.Shape");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMainShapeRule());
						}
					}
					otherlv_4=RULE_ID
					{
						newLeafNode(otherlv_4, grammarAccess.getMainShapeAccess().getS11BasicShapeCrossReference_3_1_0());
					}
				)
			)
		)
		(
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getMainShapeAccess().getCommaKeyword_4_0_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getMainShapeAccess().getS2ShapeParserRuleCall_4_0_1_0());
						}
						lv_s2_6_0=ruleShape
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMainShapeRule());
							}
							add(
								$current,
								"s2",
								lv_s2_6_0,
								"org.xtext.online_elm.OnlineElm.Shape");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMainShapeRule());
						}
					}
					otherlv_7=RULE_ID
					{
						newLeafNode(otherlv_7, grammarAccess.getMainShapeAccess().getS22BasicShapeCrossReference_4_1_0());
					}
				)
			)
		)*
		otherlv_8=']'
		{
			newLeafNode(otherlv_8, grammarAccess.getMainShapeAccess().getRightSquareBracketKeyword_5());
		}
		(
			otherlv_9='++'
			{
				newLeafNode(otherlv_9, grammarAccess.getMainShapeAccess().getPlusSignPlusSignKeyword_6_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMainShapeRule());
						}
					}
					otherlv_10=RULE_ID
					{
						newLeafNode(otherlv_10, grammarAccess.getMainShapeAccess().getSgShapeGroupCrossReference_6_1_0());
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleShapeDef
entryRuleShapeDef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getShapeDefRule()); }
	iv_ruleShapeDef=ruleShapeDef
	{ $current=$iv_ruleShapeDef.current; }
	EOF;

// Rule ShapeDef
ruleShapeDef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getShapeDefAccess().getShapeGroupParserRuleCall_0());
		}
		this_ShapeGroup_0=ruleShapeGroup
		{
			$current = $this_ShapeGroup_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getShapeDefAccess().getBasicShapeParserRuleCall_1());
		}
		this_BasicShape_1=ruleBasicShape
		{
			$current = $this_BasicShape_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleShapeGroup
entryRuleShapeGroup returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getShapeGroupRule()); }
	iv_ruleShapeGroup=ruleShapeGroup
	{ $current=$iv_ruleShapeGroup.current; }
	EOF;

// Rule ShapeGroup
ruleShapeGroup returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getShapeGroupAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getShapeGroupRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getShapeGroupAccess().getEqualsSignKeyword_1());
		}
		otherlv_2='['
		{
			newLeafNode(otherlv_2, grammarAccess.getShapeGroupAccess().getLeftSquareBracketKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getShapeGroupAccess().getS1ShapeParserRuleCall_3_0_0());
					}
					lv_s1_3_0=ruleShape
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getShapeGroupRule());
						}
						set(
							$current,
							"s1",
							lv_s1_3_0,
							"org.xtext.online_elm.OnlineElm.Shape");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getShapeGroupRule());
						}
					}
					otherlv_4=RULE_ID
					{
						newLeafNode(otherlv_4, grammarAccess.getShapeGroupAccess().getS11BasicShapeCrossReference_3_1_0());
					}
				)
			)
		)
		(
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getShapeGroupAccess().getCommaKeyword_4_0_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getShapeGroupAccess().getS2ShapeParserRuleCall_4_0_1_0());
						}
						lv_s2_6_0=ruleShape
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getShapeGroupRule());
							}
							add(
								$current,
								"s2",
								lv_s2_6_0,
								"org.xtext.online_elm.OnlineElm.Shape");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getShapeGroupRule());
						}
					}
					otherlv_7=RULE_ID
					{
						newLeafNode(otherlv_7, grammarAccess.getShapeGroupAccess().getS22BasicShapeCrossReference_4_1_0());
					}
				)
			)
		)*
		otherlv_8=']'
		{
			newLeafNode(otherlv_8, grammarAccess.getShapeGroupAccess().getRightSquareBracketKeyword_5());
		}
		(
			otherlv_9='++'
			{
				newLeafNode(otherlv_9, grammarAccess.getShapeGroupAccess().getPlusSignPlusSignKeyword_6_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getShapeGroupRule());
						}
					}
					otherlv_10=RULE_ID
					{
						newLeafNode(otherlv_10, grammarAccess.getShapeGroupAccess().getSgShapeGroupCrossReference_6_1_0());
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleBasicShape
entryRuleBasicShape returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBasicShapeRule()); }
	iv_ruleBasicShape=ruleBasicShape
	{ $current=$iv_ruleBasicShape.current; }
	EOF;

// Rule BasicShape
ruleBasicShape returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getBasicShapeAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBasicShapeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getBasicShapeAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBasicShapeAccess().getShapeShapeParserRuleCall_2_0());
				}
				lv_shape_2_0=ruleShape
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBasicShapeRule());
					}
					set(
						$current,
						"shape",
						lv_shape_2_0,
						"org.xtext.online_elm.OnlineElm.Shape");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleShape
entryRuleShape returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getShapeRule()); }
	iv_ruleShape=ruleShape
	{ $current=$iv_ruleShape.current; }
	EOF;

// Rule Shape
ruleShape returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getShapeAccess().getStencilStencilParserRuleCall_0_0_0());
					}
					lv_stencil_0_0=ruleStencil
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getShapeRule());
						}
						set(
							$current,
							"stencil",
							lv_stencil_0_0,
							"org.xtext.online_elm.OnlineElm.Stencil");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1='|>'
			{
				newLeafNode(otherlv_1, grammarAccess.getShapeAccess().getVerticalLineGreaterThanSignKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getShapeAccess().getDrawDrawParserRuleCall_0_2_0());
					}
					lv_draw_2_0=ruleDraw
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getShapeRule());
						}
						set(
							$current,
							"draw",
							lv_draw_2_0,
							"org.xtext.online_elm.OnlineElm.Draw");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getShapeAccess().getConditionalParserRuleCall_1());
		}
		this_Conditional_3=ruleConditional
		{
			$current = $this_Conditional_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleConditional
entryRuleConditional returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionalRule()); }
	iv_ruleConditional=ruleConditional
	{ $current=$iv_ruleConditional.current; }
	EOF;

// Rule Conditional
ruleConditional returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getConditionalAccess().getIfKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getConditionalAccess().getBool_expParserRuleCall_1());
		}
		this_Bool_exp_1=ruleBool_exp
		{
			$current = $this_Bool_exp_1.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_2='then'
		{
			newLeafNode(otherlv_2, grammarAccess.getConditionalAccess().getThenKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalAccess().getExp1ShapeParserRuleCall_3_0());
				}
				lv_exp1_3_0=ruleShape
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalRule());
					}
					set(
						$current,
						"exp1",
						lv_exp1_3_0,
						"org.xtext.online_elm.OnlineElm.Shape");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='else'
		{
			newLeafNode(otherlv_4, grammarAccess.getConditionalAccess().getElseKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalAccess().getExp2ShapeParserRuleCall_5_0());
				}
				lv_exp2_5_0=ruleShape
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalRule());
					}
					set(
						$current,
						"exp2",
						lv_exp2_5_0,
						"org.xtext.online_elm.OnlineElm.Shape");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBool_exp
entryRuleBool_exp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBool_expRule()); }
	iv_ruleBool_exp=ruleBool_exp
	{ $current=$iv_ruleBool_exp.current; }
	EOF;

// Rule Bool_exp
ruleBool_exp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='not'
			{
				newLeafNode(otherlv_0, grammarAccess.getBool_expAccess().getNotKeyword_0());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getBool_expAccess().getLeftTerminal_Bool_expParserRuleCall_1_0());
				}
				lv_left_1_0=ruleTerminal_Bool_exp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBool_expRule());
					}
					set(
						$current,
						"left",
						lv_left_1_0,
						"org.xtext.online_elm.OnlineElm.Terminal_Bool_exp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getBool_expAccess().getOperatorBOOL_OPEnumRuleCall_2_0_0());
					}
					lv_operator_2_0=ruleBOOL_OP
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBool_expRule());
						}
						add(
							$current,
							"operator",
							lv_operator_2_0,
							"org.xtext.online_elm.OnlineElm.BOOL_OP");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getBool_expAccess().getRightsTerminal_Bool_expParserRuleCall_2_1_0());
					}
					lv_rights_3_0=ruleTerminal_Bool_exp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBool_expRule());
						}
						add(
							$current,
							"rights",
							lv_rights_3_0,
							"org.xtext.online_elm.OnlineElm.Terminal_Bool_exp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleTerminal_Bool_exp
entryRuleTerminal_Bool_exp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTerminal_Bool_expRule()); }
	iv_ruleTerminal_Bool_exp=ruleTerminal_Bool_exp
	{ $current=$iv_ruleTerminal_Bool_exp.current; }
	EOF;

// Rule Terminal_Bool_exp
ruleTerminal_Bool_exp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTerminal_Bool_expAccess().getN1Num_valueParserRuleCall_0_0());
				}
				lv_n1_0_0=ruleNum_value
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTerminal_Bool_expRule());
					}
					set(
						$current,
						"n1",
						lv_n1_0_0,
						"org.xtext.online_elm.OnlineElm.Num_value");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTerminal_Bool_expAccess().getCompCOMPARISONEnumRuleCall_1_0());
				}
				lv_comp_1_0=ruleCOMPARISON
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTerminal_Bool_expRule());
					}
					set(
						$current,
						"comp",
						lv_comp_1_0,
						"org.xtext.online_elm.OnlineElm.COMPARISON");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTerminal_Bool_expAccess().getN2Num_valueParserRuleCall_2_0());
				}
				lv_n2_2_0=ruleNum_value
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTerminal_Bool_expRule());
					}
					set(
						$current,
						"n2",
						lv_n2_2_0,
						"org.xtext.online_elm.OnlineElm.Num_value");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleNum_value
entryRuleNum_value returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNum_valueRule()); }
	iv_ruleNum_value=ruleNum_value
	{ $current=$iv_ruleNum_value.current; }
	EOF;

// Rule Num_value
ruleNum_value returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_num_0_0=RULE_FLOAT
				{
					newLeafNode(lv_num_0_0, grammarAccess.getNum_valueAccess().getNumFLOATTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNum_valueRule());
					}
					setWithLastConsumed(
						$current,
						"num",
						lv_num_0_0,
						"org.xtext.online_elm.OnlineElm.FLOAT");
				}
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getNum_valueAccess().getMath_expParserRuleCall_1());
		}
		this_Math_exp_1=ruleMath_exp
		{
			$current = $this_Math_exp_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleMath_exp
entryRuleMath_exp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMath_expRule()); }
	iv_ruleMath_exp=ruleMath_exp
	{ $current=$iv_ruleMath_exp.current; }
	EOF;

// Rule Math_exp
ruleMath_exp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getMath_expAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				lv_n1_1_0=RULE_FLOAT
				{
					newLeafNode(lv_n1_1_0, grammarAccess.getMath_expAccess().getN1FLOATTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMath_expRule());
					}
					setWithLastConsumed(
						$current,
						"n1",
						lv_n1_1_0,
						"org.xtext.online_elm.OnlineElm.FLOAT");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMath_expAccess().getOp1MATH_OPEnumRuleCall_2_0());
				}
				lv_op1_2_0=ruleMATH_OP
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMath_expRule());
					}
					set(
						$current,
						"op1",
						lv_op1_2_0,
						"org.xtext.online_elm.OnlineElm.MATH_OP");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_n2_3_0=RULE_FLOAT
				{
					newLeafNode(lv_n2_3_0, grammarAccess.getMath_expAccess().getN2FLOATTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMath_expRule());
					}
					setWithLastConsumed(
						$current,
						"n2",
						lv_n2_3_0,
						"org.xtext.online_elm.OnlineElm.FLOAT");
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getMath_expAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleStencil
entryRuleStencil returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStencilRule()); }
	iv_ruleStencil=ruleStencil
	{ $current=$iv_ruleStencil.current; }
	EOF;

// Rule Stencil
ruleStencil returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStencilAccess().getCircleParserRuleCall_0());
		}
		this_Circle_0=ruleCircle
		{
			$current = $this_Circle_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStencilAccess().getRectParserRuleCall_1());
		}
		this_Rect_1=ruleRect
		{
			$current = $this_Rect_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStencilAccess().getTextParserRuleCall_2());
		}
		this_Text_2=ruleText
		{
			$current = $this_Text_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCircle
entryRuleCircle returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCircleRule()); }
	iv_ruleCircle=ruleCircle
	{ $current=$iv_ruleCircle.current; }
	EOF;

// Rule Circle
ruleCircle returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='circle'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getCircleAccess().getNameCircleKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCircleRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "circle");
				}
			)
		)
		(
			(
				lv_diameter_1_0=RULE_FLOAT
				{
					newLeafNode(lv_diameter_1_0, grammarAccess.getCircleAccess().getDiameterFLOATTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCircleRule());
					}
					setWithLastConsumed(
						$current,
						"diameter",
						lv_diameter_1_0,
						"org.xtext.online_elm.OnlineElm.FLOAT");
				}
			)
		)
	)
;

// Entry rule entryRuleRect
entryRuleRect returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRectRule()); }
	iv_ruleRect=ruleRect
	{ $current=$iv_ruleRect.current; }
	EOF;

// Rule Rect
ruleRect returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='rect'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getRectAccess().getNameRectKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRectRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "rect");
				}
			)
		)
		(
			(
				lv_edgeX_1_0=RULE_FLOAT
				{
					newLeafNode(lv_edgeX_1_0, grammarAccess.getRectAccess().getEdgeXFLOATTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRectRule());
					}
					setWithLastConsumed(
						$current,
						"edgeX",
						lv_edgeX_1_0,
						"org.xtext.online_elm.OnlineElm.FLOAT");
				}
			)
		)
		(
			(
				lv_edgeY_2_0=RULE_FLOAT
				{
					newLeafNode(lv_edgeY_2_0, grammarAccess.getRectAccess().getEdgeYFLOATTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRectRule());
					}
					setWithLastConsumed(
						$current,
						"edgeY",
						lv_edgeY_2_0,
						"org.xtext.online_elm.OnlineElm.FLOAT");
				}
			)
		)
	)
;

// Entry rule entryRuleText
entryRuleText returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTextRule()); }
	iv_ruleText=ruleText
	{ $current=$iv_ruleText.current; }
	EOF;

// Rule Text
ruleText returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='text'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getTextAccess().getNameTextKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTextRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "text");
				}
			)
		)
		(
			(
				lv_content_1_0=RULE_STRING
				{
					newLeafNode(lv_content_1_0, grammarAccess.getTextAccess().getContentSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTextRule());
					}
					setWithLastConsumed(
						$current,
						"content",
						lv_content_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleDraw
entryRuleDraw returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDrawRule()); }
	iv_ruleDraw=ruleDraw
	{ $current=$iv_ruleDraw.current; }
	EOF;

// Rule Draw
ruleDraw returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDrawAccess().getFilledColorFillParserRuleCall_0_0());
				}
				lv_filledColor_0_0=ruleFill
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDrawRule());
					}
					set(
						$current,
						"filledColor",
						lv_filledColor_0_0,
						"org.xtext.online_elm.OnlineElm.Fill");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='|>'
			{
				newLeafNode(otherlv_1, grammarAccess.getDrawAccess().getVerticalLineGreaterThanSignKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDrawAccess().getPositionMoveParserRuleCall_1_1_0());
					}
					lv_position_2_0=ruleMove
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDrawRule());
						}
						set(
							$current,
							"position",
							lv_position_2_0,
							"org.xtext.online_elm.OnlineElm.Move");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleFill
entryRuleFill returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFillRule()); }
	iv_ruleFill=ruleFill
	{ $current=$iv_ruleFill.current; }
	EOF;

// Rule Fill
ruleFill returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='filled'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getFillAccess().getNameFilledKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFillRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "filled");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFillAccess().getColorColorEnumRuleCall_1_0());
				}
				lv_color_1_0=ruleColor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFillRule());
					}
					set(
						$current,
						"color",
						lv_color_1_0,
						"org.xtext.online_elm.OnlineElm.Color");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMove
entryRuleMove returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMoveRule()); }
	iv_ruleMove=ruleMove
	{ $current=$iv_ruleMove.current; }
	EOF;

// Rule Move
ruleMove returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='move'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getMoveAccess().getNameMoveKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMoveRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "move");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getMoveAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMoveAccess().getXNum_valueParserRuleCall_2_0());
				}
				lv_x_2_0=ruleNum_value
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMoveRule());
					}
					set(
						$current,
						"x",
						lv_x_2_0,
						"org.xtext.online_elm.OnlineElm.Num_value");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getMoveAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMoveAccess().getYNum_valueParserRuleCall_4_0());
				}
				lv_y_4_0=ruleNum_value
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMoveRule());
					}
					set(
						$current,
						"y",
						lv_y_4_0,
						"org.xtext.online_elm.OnlineElm.Num_value");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getMoveAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Rule BOOL_OP
ruleBOOL_OP returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='&&'
			{
				$current = grammarAccess.getBOOL_OPAccess().getAndEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getBOOL_OPAccess().getAndEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='||'
			{
				$current = grammarAccess.getBOOL_OPAccess().getOrEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getBOOL_OPAccess().getOrEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule MATH_OP
ruleMATH_OP returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='+'
			{
				$current = grammarAccess.getMATH_OPAccess().getPlusEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMATH_OPAccess().getPlusEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='-'
			{
				$current = grammarAccess.getMATH_OPAccess().getMinusEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMATH_OPAccess().getMinusEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='*'
			{
				$current = grammarAccess.getMATH_OPAccess().getTimesEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getMATH_OPAccess().getTimesEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='/'
			{
				$current = grammarAccess.getMATH_OPAccess().getDivideEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getMATH_OPAccess().getDivideEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule COMPARISON
ruleCOMPARISON returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='>'
			{
				$current = grammarAccess.getCOMPARISONAccess().getBiggerEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCOMPARISONAccess().getBiggerEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='>='
			{
				$current = grammarAccess.getCOMPARISONAccess().getNoLessThanEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCOMPARISONAccess().getNoLessThanEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='<'
			{
				$current = grammarAccess.getCOMPARISONAccess().getSmallerEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getCOMPARISONAccess().getSmallerEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='<='
			{
				$current = grammarAccess.getCOMPARISONAccess().getNoBiggerThanEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getCOMPARISONAccess().getNoBiggerThanEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='=='
			{
				$current = grammarAccess.getCOMPARISONAccess().getEqualEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getCOMPARISONAccess().getEqualEnumLiteralDeclaration_4());
			}
		)
	)
;

// Rule Color
ruleColor returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='black'
			{
				$current = grammarAccess.getColorAccess().getBLACKEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getColorAccess().getBLACKEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='red'
			{
				$current = grammarAccess.getColorAccess().getREDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getColorAccess().getREDEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='blue'
			{
				$current = grammarAccess.getColorAccess().getBLUEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getColorAccess().getBLUEEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_FLOAT : '-'? RULE_INT ('.' RULE_INT)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
