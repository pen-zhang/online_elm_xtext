/*
 * generated by Xtext 2.24.0
 */
package org.xtext.online_elm.ui.labeling;

import com.google.inject.Inject;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.jface.viewers.StyledString;
import org.eclipse.xtext.common.types.JvmArrayType;
import org.eclipse.xtext.common.types.JvmType;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;
import org.eclipse.xtext.util.Strings;
import org.xtext.online_elm.onlineElm.BasicShape;
import org.xtext.online_elm.onlineElm.ShapeGroup;
import org.xtext.online_elm.onlineElm.MainShape;
import org.xtext.online_elm.onlineElm.Shape;

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#label-provider
 */
public class OnlineElmLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	public OnlineElmLabelProvider(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	// Labels and icons can be computed like this:
	
//	String text(Greeting ele) {
//		return "A greeting to " + ele.getName();
//	}
//
//	String image(Greeting ele) {
//		return "Greeting.gif";
//	}
	String text(MainShape ms) {
		StringBuilder builder = new StringBuilder();
		builder.append(Strings.notNull(ms.getName()));
		builder.append(" =\n[\n");
		builder.append(Shape.class.getName());
		builder.append("\n]");
		return builder.toString();

	}
	
	String text(ShapeGroup sg) {
		StringBuilder builder = new StringBuilder();
		builder.append(Strings.notNull(sg.getClass().getName()));
		builder.append("=\n[\n");
		builder.append(Shape.class.getName());
		builder.append("\n]");
		return builder.toString();
	}
	
	String text(BasicShape bs) {
		StringBuilder builder = new StringBuilder();
		builder.append(Strings.notNull(bs.getClass().getName()));
		builder.append("=\n");
		builder.append(Shape.class.getName());
		return builder.toString();
	}
	
	
	
//	String text(Conditional con) {
//		return "if " + "condition" + "then\n" + "shape1" + "\nelse\n" + "shape2";
//	}
//	
//	protected void append(StringBuilder builder, JvmType type) {
//		if (type instanceof JvmArrayType) {
//			append(builder, ((JvmArrayType) type).getComponentType());
//			builder.append("[]");
//		} else {
//			builder.append(Strings.notNull(type.getSimpleName()));
//		}
//	}

//	private StyledString style(String text) {
//		StyledString styled = new StyledString(text);
//		int offset = text.indexOf(":");
//		if (offset == -1) {
//			offset = text.indexOf("extends");
//		}
//		if (offset != -1) {
//			int length = text.length();
//			styled.setStyle(offset, length - offset, StyledString.DECORATIONS_STYLER);
//		}
//		return styled;
//	}
	
}
